<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BG4VRG的无线电之旅</title>
  
  <subtitle>探索业余无线电的奥秘，分享linux和网络的知识</subtitle>
  <link href="https://bg4vrg.com/atom.xml" rel="self"/>
  
  <link href="https://bg4vrg.com/"/>
  <updated>2024-06-04T12:28:58.379Z</updated>
  <id>https://bg4vrg.com/</id>
  
  <author>
    <name>fei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迁移transmission数据到新建服务器</title>
    <link href="https://bg4vrg.com/post/20240604174705.html"/>
    <id>https://bg4vrg.com/post/20240604174705.html</id>
    <published>2024-06-04T09:47:05.000Z</published>
    <updated>2024-06-04T12:28:58.379Z</updated>
    
    <content type="html"><![CDATA[<p>记录下将pt数据（含文件资源及种子和软件配置）从老服务器迁移到新建的24盘存储设备过程。</p><p>相关配置如下表：</p><table><thead><tr><th></th><th>老服务器</th><th>新存储</th></tr></thead><tbody><tr><td>设备型号</td><td>华为rh2288</td><td>大华7系云存储</td></tr><tr><td>硬盘盘位</td><td>12</td><td>24</td></tr><tr><td>操作系统</td><td>unraid 6.11.1</td><td>unraid 6.12.10</td></tr><tr><td>阵列模式</td><td>1块校验盘+10块组阵列</td><td>无校验盘，23块盘组zfs，系统软件数据放在单独一块512G ssd</td></tr><tr><td>可用容量</td><td>36TB</td><td>73TB</td></tr></tbody></table><span id="more"></span><h1 id="一、文件资源转移"><a href="#一、文件资源转移" class="headerlink" title="一、文件资源转移"></a>一、文件资源转移</h1><p>通过rsync将21TB数据迁移到新服务器上，具体操作见上篇文章。</p><p>因为老服务器级联交换机是千兆上联到核心上，所以最多也就跑满千兆，最后花了三天时间才传完。</p><h1 id="二、PT软件配置备份"><a href="#二、PT软件配置备份" class="headerlink" title="二、PT软件配置备份"></a>二、PT软件配置备份</h1><h2 id="2-1-安装官方4-05版transmission"><a href="#2-1-安装官方4-05版transmission" class="headerlink" title="2.1 安装官方4.05版transmission"></a>2.1 安装官方4.05版transmission</h2><p>之前使用transmission 3的快速校验版，一直传闻会有封禁风险，不过从没听过谁被ban了。这次升级，干脆就直接使用官方4.0.5版，因为4.0之后官方就支持快速校验了。</p><p>下图是2个版本的transmission容器对比，上面的是新版4.0.5.</p><p><img src="/../pic/2024-6-4-transmission-1.png"></p><p>为了防止容器占用太多的内存，可以在容器-高级设置-额外参数中添加“–memory&#x3D;4g”限制仅使用4G内存。</p><p><img src="/../pic/2024-6-4-transmission-2.png" alt="内存限制"></p><h2 id="2-2-迁移种子文件"><a href="#2-2-迁移种子文件" class="headerlink" title="2.2 迁移种子文件"></a>2.2 迁移种子文件</h2><p>新设备容器跑起来后会发现，虽然下载文件夹和配置文件夹都指向了迁移后的pt资源文件夹，但是pt软件中的种子一个不见。</p><p>这是因为在创建新版本transmission时，unraid默认指定了用户id 99和组id 100，而复制过来的文件不同组（root:root）。</p><p><img src="/../pic/2024-6-4-transmission-3.png" alt="image-20240604191730007"></p><p>使用以下命令修改文件属性。</p><ol><li><p><strong>查找用户和组</strong>： 首先，你需要确认UID为99和GID为100的用户和组的名称。使用<code>id -un 99</code>和<code>getent group 100 | cut -d: -f1</code>命令来获取这些信息。</p></li><li><p><strong>使用<code>chown</code>命令</strong>： 从第一步可以看到UID为99的用户名为<code>nobody</code>，GID为100的组名为<code>users</code>，并且你想改变文件<code>myfile.txt</code>的所有者和所属组，你可以使用以下命令：</p><p>Bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown nobody:users myfile.txt</span><br></pre></td></tr></table></figure></li></ol><p>具体操作见下图</p><p><img src="/../pic/2024-6-4-transmission-4.png"></p><h2 id="2-3-重启容器"><a href="#2-3-重启容器" class="headerlink" title="2.3 重启容器"></a>2.3 重启容器</h2><p>可以发现，几千个种子回来了～</p><p><img src="/../pic/2024-6-4-transmission-5.png" alt="image-20240604192651553"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录下将pt数据（含文件资源及种子和软件配置）从老服务器迁移到新建的24盘存储设备过程。&lt;/p&gt;
&lt;p&gt;相关配置如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;老服务器&lt;/th&gt;
&lt;th&gt;新存储&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;设备型号&lt;/td&gt;
&lt;td&gt;华为rh2288&lt;/td&gt;
&lt;td&gt;大华7系云存储&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;硬盘盘位&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;td&gt;unraid 6.11.1&lt;/td&gt;
&lt;td&gt;unraid 6.12.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阵列模式&lt;/td&gt;
&lt;td&gt;1块校验盘+10块组阵列&lt;/td&gt;
&lt;td&gt;无校验盘，23块盘组zfs，系统软件数据放在单独一块512G ssd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用容量&lt;/td&gt;
&lt;td&gt;36TB&lt;/td&gt;
&lt;td&gt;73TB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="docker" scheme="https://bg4vrg.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>rsync免密码传输</title>
    <link href="https://bg4vrg.com/post/20240602160403.html"/>
    <id>https://bg4vrg.com/post/20240602160403.html</id>
    <published>2024-06-02T08:04:03.000Z</published>
    <updated>2024-06-02T13:53:16.243Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍使用rsync将pt文件夹从一台unraid（远程主机，ip192.168.22.157）迁移到另一台unraid（本地）。因数据量有20多TB，无法一次命令完成。在执行一段时间约2TB左右后程序会崩溃，所以需要一段脚本能自动检测进程是否在执行，如果没有发现rsync就自动执行一次。</p><p>该脚本的前提是在本地可以免密码登录远程主机。</p><span id="more"></span><h1 id="一、rsync备份命令详解"><a href="#一、rsync备份命令详解" class="headerlink" title="一、rsync备份命令详解"></a>一、rsync备份命令详解</h1><p>假设希望将另一台主机（IP：192.168.22.157）备份到本地 <code>/mydir/backup/</code> 目录下，可以使用的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avP root@192.168.22.157:/repos/src/ /mydir/backup/</span><br></pre></td></tr></table></figure><p>深度定制命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --timeout=600 --retry=3 -e &quot;ssh -p 2333&quot; root@192.168.22.157:/mnt/user/huaweipt/ /mnt/user/ptshare/pt157/</span><br></pre></td></tr></table></figure><p>-a 表示归档模式，它保留原有的文件属性（如时间戳、权限等）并递归复制目录。<br>-v 表示详细模式，会在执行过程中输出详细的传输信息。<br>-z 表示启用压缩，可以在传输过程中减少带宽使用。<br>-e ssh 指定使用SSH作为传输的外壳程序，这对于网络间的文件传输非常重要，因为它提供了加密的安全通道。<br>-p 2333表示ssh端口为2333</p><p>-P 表示输出时显示更多内容如当前传送文件名称、速度、进度</p><p>–timeout和–retry选项增加超时时间和重试次数，但是–retry老版本不支持。</p><p>–delete 在源服务器上的文件删除后，在目标服务器同步删除</p><p>默认每次同步备份文件的时候，是需要输入 root 密码的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]</span><br><span class="line">Push: rsync [OPTION...] SRC... [USER@]HOST:DEST</span><br></pre></td></tr></table></figure><p><code>注意</code>：rsync命令使用中，关于末尾斜线（<code>/</code>）的说明：</p><ul><li>如果源参数的末尾有斜线，就会复制指定目录下的内容，而不复制目录本身；</li><li>如果源参数的末尾没有斜线，则会复制目录本身；</li><li>目标参数末尾的斜线没有作用；</li></ul><h1 id="二、免密设置"><a href="#二、免密设置" class="headerlink" title="二、免密设置"></a>二、免密设置</h1><h2 id="2-1、生成密钥"><a href="#2-1、生成密钥" class="headerlink" title="2.1、生成密钥"></a>2.1、生成密钥</h2><p>在本地主机上生成密钥文件，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>输入这个命令后，一路回车即可。此时会在 <code>~/.ssh/</code> 下生成 <code>id_rsa.pub</code> 文件。</p><p><img src="/../pic/2024-6-2-rsync-1.png"></p><h2 id="2-2、拷贝公钥到远端服务器"><a href="#2-2、拷贝公钥到远端服务器" class="headerlink" title="2.2、拷贝公钥到远端服务器"></a>2.2、拷贝公钥到远端服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub -p 2333 root@192.168.22.157</span><br></pre></td></tr></table></figure><p>-p 2333是指定ssh端口</p><h2 id="2-3、再次同步"><a href="#2-3、再次同步" class="headerlink" title="2.3、再次同步"></a>2.3、再次同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --<span class="built_in">timeout</span>=600 --retry=3 -e <span class="string">&quot;ssh -p 2333&quot;</span> root@10.139.22.157:/mnt/user/huaweipt/ /mnt/user/ptshare/pt157/</span><br></pre></td></tr></table></figure><p>此时就无需再输入密码了。  </p><p>ps： –retry&#x3D;3这个参数在unraid中不支持，版本问题，会导致脚本报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">pnum=$(ps -ef | grep rsync| grep -v grep|wc -l)</span><br><span class="line">if [ $pnum -eq 0 ]</span><br><span class="line">then</span><br><span class="line">       rsync -avz --timeout=600 -e &quot;ssh -p 2333&quot; root@10.139.22.157:/mnt/user/huaweipt/ /mnt/user/ptshare/pt157/</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="三、添加计划任务"><a href="#三、添加计划任务" class="headerlink" title="三、添加计划任务"></a>三、添加计划任务</h1><p>10分钟执行一次脚本检查rsync进程是否存在，不存在重启任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crobtab -e</span><br><span class="line">*/10 * * * * sh /mnt/user/appdata/src/r.sh 1&gt; /dev/null</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍使用rsync将pt文件夹从一台unraid（远程主机，ip192.168.22.157）迁移到另一台unraid（本地）。因数据量有20多TB，无法一次命令完成。在执行一段时间约2TB左右后程序会崩溃，所以需要一段脚本能自动检测进程是否在执行，如果没有发现rsync就自动执行一次。&lt;/p&gt;
&lt;p&gt;该脚本的前提是在本地可以免密码登录远程主机。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>unraid中部分硬盘无法休眠</title>
    <link href="https://bg4vrg.com/post/20240530155558.html"/>
    <id>https://bg4vrg.com/post/20240530155558.html</id>
    <published>2024-05-30T07:55:58.000Z</published>
    <updated>2024-06-02T13:54:08.604Z</updated>
    
    <content type="html"><![CDATA[<p>123</p><span id="more"></span><p>经检查发现部分硬盘位sas盘，unraid原生只支持sata硬盘休眠。</p><p>解决办法：安装第三方插件</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;123&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/categories/note/linux/"/>
    
    <category term="业余无线电" scheme="https://bg4vrg.com/categories/note/linux/AmateurRadio/"/>
    
    <category term="网络" scheme="https://bg4vrg.com/categories/note/linux/AmateurRadio/network/"/>
    
    
    <category term="业余无线电" scheme="https://bg4vrg.com/tags/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="玩客云" scheme="https://bg4vrg.com/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="docker" scheme="https://bg4vrg.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>廉价业余无线电收发套件ADX-S v2</title>
    <link href="https://bg4vrg.com/post/20240522130744.html"/>
    <id>https://bg4vrg.com/post/20240522130744.html</id>
    <published>2024-05-22T05:07:44.000Z</published>
    <updated>2024-05-22T05:10:41.612Z</updated>
    
    <content type="html"><![CDATA[<p>1ADX-S V2套件，覆盖40&#x2F;30&#x2F;20&#x2F;17&#x2F;15&#x2F;12&#x2F;10七波段，380元&#x2F;套，含所有零件和PCB板（主板，上下盖板），TCXO小板，音频线和音频转接板套件，加塑料外壳，支持FT8&#x2F;FT4&#x2F;JS8&#x2F;WSPR，可选：蓝牙模块20元</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;1ADX-S V2套件，覆盖40&amp;#x2F;30&amp;#x2F;20&amp;#x2F;17&amp;#x2F;15&amp;#x2F;12&amp;#x2F;10七波段，380元&amp;#x2F;套，含所有零件和PCB板（主板，上下盖板），TCXO小板，音频线和音频转接板套件，加塑料外壳，支持FT8&amp;#x2F;FT4&amp;#x2F;JS8&amp;#x2F;WSPR，可选：蓝牙模块20元&lt;/p&gt;</summary>
    
    
    
    <category term="业余无线电" scheme="https://bg4vrg.com/categories/AmateurRadio/"/>
    
    
    <category term="业余无线电" scheme="https://bg4vrg.com/tags/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>CsiR大佬新作NetOpsGUI:netops2.0的图形版</title>
    <link href="https://bg4vrg.com/post/20240421204758.html"/>
    <id>https://bg4vrg.com/post/20240421204758.html</id>
    <published>2024-04-21T12:47:58.000Z</published>
    <updated>2024-06-04T11:44:26.569Z</updated>
    
    <content type="html"><![CDATA[<p>偷懒专用。</p><p>以下介绍摘自项目github：<a href="https://github.com/kiraster/NetOpsGUI">https://github.com/kiraster/NetOpsGUI</a></p><p>一个使用nornir框架编写的跑交换机脚本工具的图形界面版本，参考上一代程序<a href="https://github.com/kiraster/netops_v2.0_beta">netops_v2.0_beta</a></p><p>UI界面使用了 <a href="https://github.com/zhiyiYo/PyQt-Fluent-Widgets">PyQt-Fluent-Widgets</a>，后台使用了<a href="https://github.com/nornir-automation/nornir">nornir</a> 和其周边。</p><blockquote><p>目前只写了一个接口的六分之一的三分之一，用处不大全是BUG，称为alpha版</p><p>原来的版本是命令菜单式，功能多了不好操作，较抽象</p><p>虽然这个界面也是一个图形界面主线程干进去，但是很多操作比较直观</p></blockquote><p>界面如下：</p><p><img src="/../pic/2024-4-21-netopsgui-1.png"></p><span id="more"></span><h1 id="一、创建虚拟环境"><a href="#一、创建虚拟环境" class="headerlink" title="一、创建虚拟环境"></a>一、创建虚拟环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n netopsgui python=3.8 -y</span><br></pre></td></tr></table></figure><p><img src="/../pic/2024-4-21-netopsgui-2.png"></p><h1 id="二、下载项目程序到本地"><a href="#二、下载项目程序到本地" class="headerlink" title="二、下载项目程序到本地"></a>二、下载项目程序到本地</h1><p>有git的可以直接git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kiraster/NetOpsGUI.git</span><br></pre></td></tr></table></figure><p>我是windows环境，直接下载比较合适</p><p>下载地址：<a href="https://github.com/kiraster/NetOpsGUI/archive/refs/heads/main.zip">https://github.com/kiraster/NetOpsGUI/archive/refs/heads/main.zip</a></p><h1 id="三、在虚拟环境中安装依赖组件"><a href="#三、在虚拟环境中安装依赖组件" class="headerlink" title="三、在虚拟环境中安装依赖组件"></a>三、在虚拟环境中安装依赖组件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">conda activate netopsgui</span><br><span class="line"><span class="comment"># 安装库</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="四、运行程序"><a href="#四、运行程序" class="headerlink" title="四、运行程序"></a>四、运行程序</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><h1 id="五、报错"><a href="#五、报错" class="headerlink" title="五、报错"></a>五、报错</h1><h2 id="5-1-按照github-的readme先干掉报错"><a href="#5-1-按照github-的readme先干掉报错" class="headerlink" title="5.1 按照github 的readme先干掉报错"></a>5.1 按照github 的readme先干掉报错</h2><h2 id="5-2-运行后几秒钟后崩溃"><a href="#5-2-运行后几秒钟后崩溃" class="headerlink" title="5.2 运行后几秒钟后崩溃"></a>5.2 运行后几秒钟后崩溃</h2><p><img src="/../pic/image-20240421212354188.png" alt="5.2报错"></p><p>2024-5-22：后来测试几次都没成功，暂时搁置。目前主要折腾ipaview。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;偷懒专用。&lt;/p&gt;
&lt;p&gt;以下介绍摘自项目github：&lt;a href=&quot;https://github.com/kiraster/NetOpsGUI&quot;&gt;https://github.com/kiraster/NetOpsGUI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个使用nornir框架编写的跑交换机脚本工具的图形界面版本，参考上一代程序&lt;a href=&quot;https://github.com/kiraster/netops_v2.0_beta&quot;&gt;netops_v2.0_beta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UI界面使用了 &lt;a href=&quot;https://github.com/zhiyiYo/PyQt-Fluent-Widgets&quot;&gt;PyQt-Fluent-Widgets&lt;/a&gt;，后台使用了&lt;a href=&quot;https://github.com/nornir-automation/nornir&quot;&gt;nornir&lt;/a&gt; 和其周边。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前只写了一个接口的六分之一的三分之一，用处不大全是BUG，称为alpha版&lt;/p&gt;
&lt;p&gt;原来的版本是命令菜单式，功能多了不好操作，较抽象&lt;/p&gt;
&lt;p&gt;虽然这个界面也是一个图形界面主线程干进去，但是很多操作比较直观&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../pic/2024-4-21-netopsgui-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="玩客云" scheme="https://bg4vrg.com/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>基于vue+django开发的网络设备轻量化管理平台NetOpsCenter</title>
    <link href="https://bg4vrg.com/post/20240418192744.html"/>
    <id>https://bg4vrg.com/post/20240418192744.html</id>
    <published>2024-04-18T11:27:44.000Z</published>
    <updated>2024-05-22T05:01:09.236Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/XiuziSeven/NetOpsCenter">https://github.com/XiuziSeven/NetOpsCenter</a></p><p>作者写的介绍：<a href="https://zhuanlan.zhihu.com/p/655040014">https://zhuanlan.zhihu.com/p/655040014</a></p><p>因为代码中backuponfig.py中相关备份路径默认是linux下路径方式，且使用了windows下没有的mkdir命令，所以导致windows中备份配置时会显示失败。</p><p>这也是为什么有了这篇文章的原因。</p><p><img src="/../pic/2024-4-18-netopscenter-1.png"></p><span id="more"></span><p>python环境搭建见上一篇文章。</p><p>centos7 最小化安装,所以后面会因为缺少组件导致报错。</p><h1 id="一、创建虚拟环境"><a href="#一、创建虚拟环境" class="headerlink" title="一、创建虚拟环境"></a>一、创建虚拟环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n netops python=3.9.5</span><br></pre></td></tr></table></figure><h1 id="二、安装依赖"><a href="#二、安装依赖" class="headerlink" title="二、安装依赖"></a>二、安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="2-1-这一步安装报错如下："><a href="#2-1-这一步安装报错如下：" class="headerlink" title="2.1 这一步安装报错如下："></a>2.1 这一步安装报错如下：</h2><p><img src="/../pic/2024-4-18-netopscenter-2.png"></p><p>报错指出<code>mysql_config</code>和<code>mariadb_config</code>这两个命令在系统中未找到。<code>mysql_config</code>和<code>mariadb_config</code>是MySQL和MariaDB数据库的配置实用程序，用于提供编译和链接MySQL&#x2F;MariaDB客户端库时所需的编译选项和链接标志。Python包在安装时需要调用mysqlclient这些命令来获取正确的编译参数。</p><h2 id="2-2-解决方法："><a href="#2-2-解决方法：" class="headerlink" title="2.2 解决方法："></a>2.2 解决方法：</h2><p>要解决这个问题，您需要确保系统中已经安装了MySQL或MariaDB的开发库，并且<code>mysql_config</code>或<code>mariadb_config</code>命令可被找到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-devel</span><br><span class="line"><span class="comment"># ubuntu server下使用下面命令安装</span></span><br><span class="line"><span class="comment"># apt install libmysqlclient-dev</span></span><br></pre></td></tr></table></figure><h2 id="2-3-继续pip-安装依赖，还是有报错"><a href="#2-3-继续pip-安装依赖，还是有报错" class="headerlink" title="2.3 继续pip 安装依赖，还是有报错"></a>2.3 继续pip 安装依赖，还是有报错</h2><blockquote><p>error: command ‘gcc’ failed: No such file or directory<br>      [end of output]</p><p>  note: This error originates from a subprocess, and is likely not a problem with pip.<br>  ERROR: Failed building wheel for mysqlclient<br>  Running setup.py clean for mysqlclient<br>Failed to build mysqlclient<br>ERROR: Could not build wheels for mysqlclient, which is required to install pyproject.toml-based projects</p></blockquote><p>如下图，可以看出是缺少gcc之类的，yum安装即可</p><p><img src="/../pic/2024-4-18-netopscenter-3.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ make</span><br><span class="line"><span class="comment"># ubuntu server下使用下面命令安装</span></span><br><span class="line"><span class="comment"># apt install gcc</span></span><br></pre></td></tr></table></figure><h2 id="2-4-这下pip安装依赖就没问题了"><a href="#2-4-这下pip安装依赖就没问题了" class="headerlink" title="2.4 这下pip安装依赖就没问题了"></a>2.4 这下pip安装依赖就没问题了</h2><p><img src="/../pic/2024-4-18-netopscenter-4.png"></p><h1 id="四、数据库安装"><a href="#四、数据库安装" class="headerlink" title="四、数据库安装"></a>四、数据库安装</h1><p>代码应该是支持sqlite的，有兴趣的可以去代码里把mysql的注释掉，启用sqlite测试。我这里没有按照作者说明里在本地安装数据库，而是使用局域网一台群晖安装的mariaDB10套件测试。</p><p>注意之后需要在.&#x2F;netopscenter&#x2F;settings.py中修改相关数据库参数。</p><h2 id="4-1、套件安装"><a href="#4-1、套件安装" class="headerlink" title="4.1、套件安装"></a>4.1、套件安装</h2><p>略。</p><h2 id="4-2-数据库创建"><a href="#4-2-数据库创建" class="headerlink" title="4.2 数据库创建"></a>4.2 数据库创建</h2><p>ssh进入群晖，找到数据库安装路径&#x2F;volume3&#x2F;@appstore&#x2F;MariaDB10&#x2F;usr&#x2F;local&#x2F;mariadb10&#x2F;bin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /volume3/@appstore/MariaDB10/usr/local/mariadb10/bin</span><br><span class="line">./mysql -u root -p</span><br><span class="line"><span class="comment"># 以管理员身份进入数据库进行管理</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 查看已存在数据库</span></span><br><span class="line">drop database django;</span><br><span class="line"><span class="comment"># 把之前在windows下测试的django数据库删掉</span></span><br><span class="line">create database django;</span><br><span class="line"><span class="comment"># 重新创建django数据库用于服务</span></span><br><span class="line">use django;</span><br><span class="line"><span class="comment"># 选择django数据库</span></span><br><span class="line">grant all on django.* TO <span class="string">&#x27;django&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;Suyu123!@#&#x27;</span>;</span><br><span class="line"><span class="comment"># 向MySQL数据库中授予特定用户对特定数据库的全部权限，并且指定了用户的登录凭据</span></span><br><span class="line">ALTER DATABASE django DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br><span class="line"><span class="comment"># 修改数据库编码，解决中文乱码问题</span></span><br></pre></td></tr></table></figure><h1 id="五、拉取项目并修改-netopscenter-settings-py"><a href="#五、拉取项目并修改-netopscenter-settings-py" class="headerlink" title="五、拉取项目并修改.&#x2F;netopscenter&#x2F;settings.py"></a>五、拉取项目并修改.&#x2F;netopscenter&#x2F;settings.py</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/XiuziSeven/NetOpsCenter.git</span><br></pre></td></tr></table></figure><p>找到数据库配置代码，修改数据库名及连接用户名、密码、数据库地址。</p><h1 id="六、初始化数据库"><a href="#六、初始化数据库" class="headerlink" title="六、初始化数据库"></a>六、初始化数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations app</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="6-1makemigrations-app命令报错"><a href="#6-1makemigrations-app命令报错" class="headerlink" title="6.1makemigrations app命令报错"></a>6.1makemigrations app命令报错</h2><h3 id="6-1-1-报错内容如下"><a href="#6-1-1-报错内容如下" class="headerlink" title="6.1.1 报错内容如下"></a>6.1.1 报错内容如下</h3><blockquote><p>d:\miniconda3\envs\NetOpsCenter\lib\site-packages\django\core\management\commands\makemigrations.py:121: RuntimeWarning: Got an error checking a consistent migration history performed for database connection ‘default’: (1130, “Host ‘10.139.27.5’ is not allowed to connect to this MariaDB server”)<br>  warnings.warn(<br>Migrations for ‘app’:<br>  app\migrations\0001_initial.py</p><ul><li>Create model Area</li><li>Create model DeviceBrand</li><li>Create model Devices</li><li>Create model DeviceType</li><li>Create model DeviceUser</li><li>Create model Task</li><li>Create model DevicesGroup</li><li>Add field device_type to devices</li><li>Add field device_user to devices</li><li>Create model NewUser</li></ul></blockquote><p> 这个错误表示: MySQL中的用户权限信息通常存储在系统数据库 mysql 中的 user 表中，而不是在您自定义的数据库（如django）中。错误信息中的表名 django.user 似乎暗示您试图在 django 数据库中查找用户表，但实际上应该是在 mysql 数据库中。</p><p>主要原因是运行程序设备ip不是数据库服务器信任地址。</p><h3 id="6-1-2-解决方案"><a href="#6-1-2-解决方案" class="headerlink" title="6.1.2 解决方案"></a>6.1.2 解决方案</h3><p>更正 UPDATE 语句，使其指向正确的表。对于修改用户权限，正确的数据库操作命令应该是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user SET host = <span class="string">&#x27;10.139.27.%&#x27;</span> WHERE User = <span class="string">&#x27;django&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>注意：</p><p>10.139.27.%表示10.139.27.0&#x2F;24段子网</p><p>使用 mysql.user 表示系统数据库 mysql 中的 user 表。<br>使用 User 而不是 user，因为在 mysql.user 表中，用户名字段的列名是 User（首字母大写）。</p><blockquote><p>MariaDB [django]&gt; UPDATE mysql.user SET host &#x3D; ‘10.139.27.%’ WHERE User &#x3D; ‘django’;<br>Query OK, 1 row affected (0.000 sec)<br>Rows matched: 1  Changed: 1  Warnings: </p></blockquote><h3 id="6-1-3-python运行还是报错，回到数据库中继续给权限"><a href="#6-1-3-python运行还是报错，回到数据库中继续给权限" class="headerlink" title="6.1.3 python运行还是报错，回到数据库中继续给权限"></a>6.1.3 python运行还是报错，回到数据库中继续给权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON django.* TO <span class="string">&#x27;django&#x27;</span>@<span class="string">&#x27;10.139.27.%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="6-1-4-重新执行数据库初始化，均无报错了"><a href="#6-1-4-重新执行数据库初始化，均无报错了" class="headerlink" title="6.1.4 重新执行数据库初始化，均无报错了"></a>6.1.4 重新执行数据库初始化，均无报错了</h3><p>(NetOpsCenter) E:\pythoncode\NetOpsCenter&gt;python manage.py makemigrations app<br>No changes detected in app ‘app’<br>python manage.py migrate #无报错</p><h1 id="七、创建默认管理员账号"><a href="#七、创建默认管理员账号" class="headerlink" title="七、创建默认管理员账号"></a>七、创建默认管理员账号</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser <span class="comment">#创建管理员</span></span><br><span class="line">python manage.py <span class="built_in">help</span>  <span class="comment">#帮助</span></span><br></pre></td></tr></table></figure><p>有个天坑，是我在windows下测试发现的。</p><p>1、密码不能小于6位，且要有字母，否则无法登陆。</p><p>2、用户名必须是admin，其他用户名提示用户名无效。（登录后发现所创建用户都能看到，说明创建成功了，但是就是不能登录）</p><p>是否个例需要大家测试。</p><p>2024-5-22：实际上在linux（ubuntu22）下测试也是同样问题，大家小心。</p><h1 id="八、运行服务"><a href="#八、运行服务" class="headerlink" title="八、运行服务"></a>八、运行服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><h1 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h1><h2 id="9-1-防火墙放行"><a href="#9-1-防火墙放行" class="headerlink" title="9.1 防火墙放行"></a>9.1 防火墙放行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=8000/tcp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h2 id="9-2-ubuntu下手动执行脚本启动服务"><a href="#9-2-ubuntu下手动执行脚本启动服务" class="headerlink" title="9.2 ubuntu下手动执行脚本启动服务"></a>9.2 ubuntu下手动执行脚本启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 等效于@echo off，关闭命令回显，我不确认是否有效，阿里ai给的</span></span><br><span class="line"><span class="built_in">exec</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="comment"># 使用conda激活miniconda3环境，可以先用conda info命令确认路径</span></span><br><span class="line"><span class="built_in">source</span> /home/bg4vrg/miniconda3/bin/activate /home/bg4vrg/miniconda3/envs/netopscenter</span><br><span class="line"><span class="comment"># 更改工作目录到NetOpsCenter目录</span></span><br><span class="line"><span class="built_in">cd</span> /home/bg4vrg/NetOpsCenter</span><br><span class="line"><span class="comment"># 运行python manage.py命令</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>注意ubuntu下要使用<code>/bin/bash netopscenter.sh</code>执行脚本，因为ubuntu和centos不同，默认解释器是dash。</p><h2 id="9-2-1-ubuntu下创建服务开机自启动"><a href="#9-2-1-ubuntu下创建服务开机自启动" class="headerlink" title="9.2.1 ubuntu下创建服务开机自启动"></a>9.2.1 ubuntu下创建服务开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新增服务，名称为netopscenter</span></span><br><span class="line">sudo nano /etc/systemd/system/netopscenter.service</span><br><span class="line"><span class="comment"># 启用激活netopscenter服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> netopscenter.service</span><br><span class="line"><span class="comment"># 启动netopscenter服务</span></span><br><span class="line">sudo systemctl start netopscenter.service</span><br><span class="line"><span class="comment"># 查看netopscenter服务状态</span></span><br><span class="line">sudo systemctl status netopscenter.service</span><br><span class="line"><span class="comment"># 查看服务日志</span></span><br><span class="line">sudo journalctl -u netopscenter.service</span><br></pre></td></tr></table></figure><p>上面&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;netopscenter.service内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=NetOpsCenter Startup Script</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/bin/bash -c <span class="string">&#x27;/home/bg4vrg/netopscenter.sh&#x27;</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=50  <span class="comment"># 重启间隔，单位为秒</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>/bin/bash -c &#39;/home/bg4vrg/netopscenter.sh&#39;</code></p><p>这里，<code>/bin/bash -c</code>表示使用bash解释器执行紧跟其后的命令字符串</p><p>重启，检查服务生效。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/XiuziSeven/NetOpsCenter&quot;&gt;https://github.com/XiuziSeven/NetOpsCenter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者写的介绍：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/655040014&quot;&gt;https://zhuanlan.zhihu.com/p/655040014&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为代码中backuponfig.py中相关备份路径默认是linux下路径方式，且使用了windows下没有的mkdir命令，所以导致windows中备份配置时会显示失败。&lt;/p&gt;
&lt;p&gt;这也是为什么有了这篇文章的原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../pic/2024-4-18-netopscenter-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装miniconda3</title>
    <link href="https://bg4vrg.com/post/20240418164858.html"/>
    <id>https://bg4vrg.com/post/20240418164858.html</id>
    <published>2024-04-18T08:48:58.000Z</published>
    <updated>2024-04-18T11:33:18.265Z</updated>
    
    <content type="html"><![CDATA[<p>windows下安装miniconda3很简单，参考CSIR大佬这篇文章：<a href="https://kiraster.github.io/posts/f2cfb11.html">https://kiraster.github.io/posts/f2cfb11.html</a></p><p>最近折腾袖子Seven的轻量化网络运维平台NetOPSCenter（<a href="https://github.com/XiuziSeven/NetOpsCenter">项目地址</a>），发现有的代码是针对linux环境写的，在windows下会因为路径和命令不支持的原因导致批量备份时发生500错误，无法使用。</p><p>这里记录下centos7下安装miniconda3的过程。后续有条件可以试试ubuntu等环境测试，毕竟centos7快挂了。</p><span id="more"></span><h1 id="一、最小化安装centos7"><a href="#一、最小化安装centos7" class="headerlink" title="一、最小化安装centos7"></a>一、最小化安装centos7</h1><p>这里不赘述了，主要是配下ip地址，安装nano、wget等基本命令。</p><h1 id="二、下载并运行miniconda3安装脚本"><a href="#二、下载并运行miniconda3安装脚本" class="headerlink" title="二、下载并运行miniconda3安装脚本"></a>二、下载并运行miniconda3安装脚本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.3.0-0-Linux-x86_64.sh --no-check-certificate</span><br><span class="line">chmod +x Miniconda3-py310_24.3.0-0-Linux-x86_64.sh</span><br><span class="line">sh Miniconda3-py310_24.3.0-0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><h2 id="2-1-按照提示一路yes安装"><a href="#2-1-按照提示一路yes安装" class="headerlink" title="2.1 按照提示一路yes安装"></a>2.1 按照提示一路yes安装</h2><h2 id="2-2-安装路径修改为-home-miniconda3"><a href="#2-2-安装路径修改为-home-miniconda3" class="headerlink" title="2.2 安装路径修改为&#x2F;home&#x2F;miniconda3"></a>2.2 安装路径修改为&#x2F;home&#x2F;miniconda3</h2><p>尽量不安装在默认的&#x2F;root&#x2F;miniconda3下</p><p><img src="/../pic/2024-4-18-miniconda3-1.png"></p><h2 id="2-3-这一步选yes，让miniconda自动添加环境变量路径"><a href="#2-3-这一步选yes，让miniconda自动添加环境变量路径" class="headerlink" title="2.3 这一步选yes，让miniconda自动添加环境变量路径"></a>2.3 这一步选yes，让miniconda自动添加环境变量路径</h2><p><img src="/../pic/2024-4-18-miniconda3-2.png"></p><h1 id="三、重启服务器，检查安装版本"><a href="#三、重启服务器，检查安装版本" class="headerlink" title="三、重启服务器，检查安装版本"></a>三、重启服务器，检查安装版本</h1><p><code>conda --version</code></p><p><code>conda info</code></p><p><img src="/../pic/2024-4-18-miniconda3-3.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;windows下安装miniconda3很简单，参考CSIR大佬这篇文章：&lt;a href=&quot;https://kiraster.github.io/posts/f2cfb11.html&quot;&gt;https://kiraster.github.io/posts/f2cfb11.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近折腾袖子Seven的轻量化网络运维平台NetOPSCenter（&lt;a href=&quot;https://github.com/XiuziSeven/NetOpsCenter&quot;&gt;项目地址&lt;/a&gt;），发现有的代码是针对linux环境写的，在windows下会因为路径和命令不支持的原因导致批量备份时发生500错误，无法使用。&lt;/p&gt;
&lt;p&gt;这里记录下centos7下安装miniconda3的过程。后续有条件可以试试ubuntu等环境测试，毕竟centos7快挂了。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="miniconda" scheme="https://bg4vrg.com/tags/miniconda/"/>
    
    <category term="python" scheme="https://bg4vrg.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>迁移python环境到内网离线使用</title>
    <link href="https://bg4vrg.com/post/20240409201339.html"/>
    <id>https://bg4vrg.com/post/20240409201339.html</id>
    <published>2024-04-09T12:13:39.000Z</published>
    <updated>2024-04-09T12:38:53.119Z</updated>
    
    <content type="html"><![CDATA[<p>python很好，miniconda3安装也很省心。但是如果是大内网无法访问互联网，就只能望洋兴叹了。</p><p>这里记录下自己如何将互联网环境下配置好的python环境迁移到大内网机器上。</p><span id="more"></span><p>我的互联网（windows2019）和内网机器（windows10）都是windows系统，如果跨操作系统可能会有问题。</p><h1 id="一、互联网端"><a href="#一、互联网端" class="headerlink" title="一、互联网端"></a>一、互联网端</h1><h2 id="1-1-安装miniconda3"><a href="#1-1-安装miniconda3" class="headerlink" title="1.1 安装miniconda3"></a>1.1 安装miniconda3</h2><p>具体操作见之前的文章</p><h2 id="1-2-创建虚拟环境"><a href="#1-2-创建虚拟环境" class="headerlink" title="1.2 创建虚拟环境"></a>1.2 创建虚拟环境</h2><p>具体什么版本要看你运行的程序要求了</p><p>创建一个虚拟环境（指定Python版本3.10）</p><p><code>conda create -n ipa_base python=3.10</code></p><p>激活虚拟环境</p><p><code>conda activate ipa_base</code></p><h2 id="1-3-安装依赖库"><a href="#1-3-安装依赖库" class="headerlink" title="1.3 安装依赖库"></a>1.3 安装依赖库</h2><p>需要安装程序说明使用pip安装一系列依赖</p><p><code>pip install -r requirements.txt</code></p><h2 id="1-4-检查已安装哪些"><a href="#1-4-检查已安装哪些" class="headerlink" title="1.4 检查已安装哪些"></a>1.4 检查已安装哪些</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br><span class="line">pip list</span><br></pre></td></tr></table></figure><h2 id="1-5-安装打包工具conda-pack"><a href="#1-5-安装打包工具conda-pack" class="headerlink" title="1.5 安装打包工具conda-pack"></a>1.5 安装打包工具conda-pack</h2><p><code>pip install conda-pack</code></p><p>如果网络有问题就换个源</p><p><code>pip install conda-pack -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com</code></p><h2 id="1-6-打包"><a href="#1-6-打包" class="headerlink" title="1.6 打包"></a>1.6 打包</h2><p><code>conda pack -n env_name</code></p><p>env_name表示你要打包的那个虚拟环境名字，我要打包的虚拟环境是ipa_base，使用下面命令</p><p><code>conda pack -n ipa_base</code>就能在当前目录找到一个压缩文件ipa_base.tar.gz，然后把这个文件和miniconda3安装包复制到内网电脑上。</p><h1 id="二、内网端"><a href="#二、内网端" class="headerlink" title="二、内网端"></a>二、内网端</h1><h2 id="2-1-安装miniconda3"><a href="#2-1-安装miniconda3" class="headerlink" title="2.1 安装miniconda3"></a>2.1 安装miniconda3</h2><h2 id="2-2-迁移虚拟环境"><a href="#2-2-迁移虚拟环境" class="headerlink" title="2.2 迁移虚拟环境"></a>2.2 迁移虚拟环境</h2><p>找到miniconda3的安装目录下的envs文件夹，我的路径如下</p><p><code>D:\miniconda3\envs</code></p><p>将ipa_base.tar.gz解压到envs文件夹下，路径如下</p><p><code>D:\miniconda3\envs\ipa_base</code></p><h2 id="2-3-激活虚拟环境"><a href="#2-3-激活虚拟环境" class="headerlink" title="2.3 激活虚拟环境"></a>2.3 激活虚拟环境</h2><p><code>conda activate ipa_base</code></p><h2 id="2-4-检查安装依赖"><a href="#2-4-检查安装依赖" class="headerlink" title="2.4 检查安装依赖"></a>2.4 检查安装依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br><span class="line">conda info</span><br><span class="line">conda list</span><br><span class="line">pip list</span><br></pre></td></tr></table></figure><h1 id="三、至此已完成迁移，可以直接运行程序了"><a href="#三、至此已完成迁移，可以直接运行程序了" class="headerlink" title="三、至此已完成迁移，可以直接运行程序了"></a>三、至此已完成迁移，可以直接运行程序了</h1><p>本文参考：<a href="https://www.cnblogs.com/jack-nie-23/p/16900926.html">https://www.cnblogs.com/jack-nie-23/p/16900926.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python很好，miniconda3安装也很省心。但是如果是大内网无法访问互联网，就只能望洋兴叹了。&lt;/p&gt;
&lt;p&gt;这里记录下自己如何将互联网环境下配置好的python环境迁移到大内网机器上。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="python" scheme="https://bg4vrg.com/tags/python/"/>
    
    <category term="miniconda3" scheme="https://bg4vrg.com/tags/miniconda3/"/>
    
  </entry>
  
  <entry>
    <title>miniconda3环境下安装调试网络自动化巡检工具singvis/Network_Automatic_Inspect</title>
    <link href="https://bg4vrg.com/post/20240407191300.html"/>
    <id>https://bg4vrg.com/post/20240407191300.html</id>
    <published>2024-04-07T11:13:00.000Z</published>
    <updated>2024-04-07T13:05:08.668Z</updated>
    
    <content type="html"><![CDATA[<p>适用于网络工程师自动化采集设备信息、下发配置、保存设备配置及批量ping等功能。</p><p>项目地址：<a href="https://github.com/singvis/Network_Automatic_Inspect">https://github.com/singvis/Network_Automatic_Inspect</a></p><span id="more"></span><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1-1-python版本"><a href="#1-1-python版本" class="headerlink" title="1.1 python版本"></a>1.1 python版本</h2><p>python推荐3.9以上，我这里使用miniconda3创建了一个名为network_auto的虚拟环境，python版本为3.10</p><h2 id="1-2-第三方模块"><a href="#1-2-第三方模块" class="headerlink" title="1.2 第三方模块"></a>1.2 第三方模块</h2><p><code>pip install -r requirement.txt</code></p><p>文件主要包括如下必要模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netmiko==3.4.0</span><br><span class="line">prettytable==3.3.0</span><br><span class="line">openpyxl==3.0.9</span><br></pre></td></tr></table></figure><p><img src="/../pic/2024-04-07-network_auto.png"></p><h2 id="1-3-巡检模板"><a href="#1-3-巡检模板" class="headerlink" title="1.3 巡检模板"></a>1.3 巡检模板</h2><p>打开<code>巡检模板.xlsx</code>, 主要分2个sheet：</p><ul><li>网络设备资产表（assets）<img src="/../pic/2024-04-07-network_auto1.png"></li></ul><p><strong>字段说明：</strong></p><ol><li>hostname: <strong>可选项</strong>，设备名称，仅标识作用,代码不会执行该字段.</li><li>comment: <strong>可选项</strong>, 注释，可用于执行设备巡检或不巡检.</li><li>ip: <strong>必填项，</strong>管理IP地址，.</li><li>protocl: <strong>必填项</strong>，连接协议，支持ssh和telnet.</li><li>port：<strong>可选项</strong>，协议端口号，支持自定义端口(自定义为必填)。</li><li>username：<strong>可选项</strong>，设备登陆用户名，.</li><li>password：<strong>可选项</strong>，设备登陆密码，.</li><li>secret：<strong>可选项</strong>，特权&#x2F;超级密码，.</li><li>device_type：<strong>必填项</strong>，设备类型，.</li></ol><ul><li>巡检命令表 <img src="/../pic/2024-04-07-network_auto2.png" alt="img"></li></ul><p><strong>字段说明：</strong></p><ol><li>comment: <strong>可选项</strong>, 注释，可用于执行或不执行的命令.</li><li>command：**必填项，巡检的命令</li></ol><h1 id="二、开始你的使用"><a href="#二、开始你的使用" class="headerlink" title="二、开始你的使用"></a>二、开始你的使用</h1><p><code>python 网络自动化巡检工具20231009.py</code></p><p>可通过pycharm、vscode或python IDE等工具执行脚本文件，如下所示： <img src="/../pic/2024-04-07-network_auto3.png" alt="img"></p><p> <strong>选项说明：</strong></p><ol><li><p>连接设备：执行后仅用于获取到设备名称，测试连接性。</p></li><li><p>采集设备信息：通过执行模板里预置命令采集回显内容。</p></li></ol><p><img src="/../pic/2024-04-07-network_auto4.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;适用于网络工程师自动化采集设备信息、下发配置、保存设备配置及批量ping等功能。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/singvis/Network_Automatic_Inspect&quot;&gt;https://github.com/singvis/Network_Automatic_Inspect&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="python" scheme="https://bg4vrg.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一款优秀的开源局域网ip管理软件-IPA_VIEW</title>
    <link href="https://bg4vrg.com/post/20240406194758.html"/>
    <id>https://bg4vrg.com/post/20240406194758.html</id>
    <published>2024-04-06T11:47:58.000Z</published>
    <updated>2024-04-18T12:20:48.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h1><p>项目地址：<a href="https://github.com/kiraster/IPA_VIEW_v0.1_Beta">https://github.com/kiraster/IPA_VIEW_v0.1_Beta</a></p><p>一个使用 Flask 框架组装的IP地址管理平台，很简陋</p><p>在配置文件<code>/app/config.py</code> 配置好指定交换机的snmp v2c 只读团体名称后，可以定时轮询指定交换机的arp数据，将获得的ip、mac地址及轮询时间写进数据库；下一次没有轮询到的已知ip会被设置为离线状态</p><p>这样就可以拿到一份准确的局域网设备数据（包括曾短暂上线后被轮询到但之后离线的）</p><span id="more"></span><p>前端：Bootstrap、Datatable、sweetalert……</p><p>后端：Flask、APScheduler……</p><p>数据库：SQLite</p><h1 id="二、内置功能"><a href="#二、内置功能" class="headerlink" title="二、内置功能"></a>二、内置功能</h1><ul><li>首页：<em>没有首页的首页</em> </li><li>IP地址表：显示IP地址使用情况，可在页面进行增、删、改、导出到Excel表格</li><li>分组：按分组 + 网段显示目录树，右侧显示所选择查看网段的饼图，方块表和网段IP地址表</li><li>设置：查看定时任务执行情况和轮询参数；将ip子网添加到指定分组</li><li>数据库：无功能，被定向到404</li><li>关于：一段话</li></ul><h1 id="三、项目结构"><a href="#三、项目结构" class="headerlink" title="三、项目结构"></a>三、项目结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">|   app.py  # 没什么用装个样子</span><br><span class="line">|   manage.py  #　应用入口文件</span><br><span class="line">|   README.md</span><br><span class="line">|   requirements.txt　　＃　安装库</span><br><span class="line">|   </span><br><span class="line">+---app</span><br><span class="line">|   |   commands.py  # 自定义插入组命令</span><br><span class="line">|   |   config.py　　＃　配置文件</span><br><span class="line">|   |   models.py　　＃　数据模型类代码</span><br><span class="line">|   |   task.py　　＃　定时任务代码</span><br><span class="line">|   |   test_data.py　　＃　导入测试数据</span><br><span class="line">|   |   __init__.py</span><br><span class="line">|   |   </span><br><span class="line">|   +---admin</span><br><span class="line">|   |   |   lib.py　　＃ 可复用功能函数代码</span><br><span class="line">|   |   |   views.py　　＃ 视图函数代码</span><br><span class="line">|   |   |   __init__.py</span><br><span class="line">|   |           </span><br><span class="line">|   +---static　　＃　CSS JS 插件</span><br><span class="line">|   |           </span><br><span class="line">|   +---templates  # 被渲染的html模板</span><br><span class="line">|   |   |   404.html  # 404 页面</span><br><span class="line">|   |   |   </span><br><span class="line">|   |   \---admin</span><br><span class="line">|   |           about.html</span><br><span class="line">|   |           base.html</span><br><span class="line">|   |           index.html</span><br><span class="line">|   |           ipgroup.html</span><br><span class="line">|   |           ipshow.html</span><br><span class="line">|   |           settings.html</span><br><span class="line">|              </span><br><span class="line">|           </span><br><span class="line">+---instance  # flask db 命令自动生成的文件夹</span><br><span class="line">|       db.sqlite3  # sqlite3数据库文件</span><br><span class="line">|       </span><br><span class="line">+---migrations  # flask db 命令自动生成的文件夹</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、安装使用"><a href="#四、安装使用" class="headerlink" title="四、安装使用"></a>四、安装使用</h1><h2 id="4-1-下载源码备用"><a href="#4-1-下载源码备用" class="headerlink" title="4.1 下载源码备用"></a>4.1 下载源码备用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># git</span><br><span class="line">git clone https://github.com/kiraster/IPA_VIEW_v0.1_Beta.git</span><br><span class="line"></span><br><span class="line"># ZIP</span><br><span class="line">https://github.com/kiraster/IPA_VIEW_v0.1_Beta  -&gt;&gt;  Code  –&gt;&gt; Download ZIP</span><br></pre></td></tr></table></figure><h2 id="4-2-安装python并配置虚拟环境"><a href="#4-2-安装python并配置虚拟环境" class="headerlink" title="4.2 安装python并配置虚拟环境"></a>4.2 安装python并配置虚拟环境</h2><p>经过热心群众测试python3.12运行本代码有错误，使用python3.10可以完美规避安装环境报错问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 使用venv</span><br><span class="line"># 创建虚拟环境</span><br><span class="line">python -m venv venv</span><br><span class="line">#  进入虚拟环境</span><br><span class="line">.\venv\Scripts\activate</span><br><span class="line"></span><br><span class="line"># 使用miniconda3</span><br><span class="line"># 可以miniconda安装python，使用介绍见作者博客https://kiraster.github.io/posts/f2cfb11.html</span><br><span class="line"># 创建一个虚拟环境（指定Python版本3.10）</span><br><span class="line">conda create -n ipa_base python=3.10</span><br><span class="line"># 激活虚拟环境</span><br><span class="line">conda activate ipa_base</span><br></pre></td></tr></table></figure><h2 id="4-3-修改配置"><a href="#4-3-修改配置" class="headerlink" title="4.3 修改配置"></a>4.3 修改配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 定义flask代码中的配置项</span><br><span class="line">class FlaskConfig:</span><br><span class="line">    HOST = &#x27;127.0.0.1&#x27;  # 设置主机地址，&#x27;0.0.0.0&#x27; 表示监听所有可用的网络接口</span><br><span class="line">    PORT = 80  # 设置端口号，此处设置仅python manage.py启动有效；flask run模式参考4.5</span><br><span class="line">    # 开启调试模式</span><br><span class="line">    DEBUG = True</span><br><span class="line">    # 数据库连接URI</span><br><span class="line">    SQLALCHEMY_DATABASE_URI = &#x27;sqlite:///db.sqlite3&#x27;</span><br><span class="line">    # SQLALCHEMY_TRACK_MODIFICATIONS当设置为True时，SQLAlchemy会在对数据库进行修改操作（如添加、更新、删除记录）后发出信号，</span><br><span class="line">    # 以便其他组件（如Flask-Migrate）能够捕获这些变化并生成相应的数据库迁移脚本。</span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br><span class="line">    # 定义SECRET_KEY，CSRF保护需要一个密钥来安全地对令牌进行签名。</span><br><span class="line">    # 默认情况下，这将使用Flask应用程序的SECRET_KEY。如果想使用单独的令牌，可以设置WTF_CSRF_SECRET_KEY</span><br><span class="line">    SECRET_KEY = &#x27;21caf73529034bf8ad2d04e820dc2f1d&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># APScheduler配置参数</span><br><span class="line"># job1 和 job2 时间建议从30改为300</span><br><span class="line">class APSchedulerConfig:</span><br><span class="line">    # 开启API查询接口</span><br><span class="line">    SCHEDULER_API_ENABLED = True</span><br><span class="line">    job1_name = &#x27;定时轮询ARP表&#x27;</span><br><span class="line">    job2_name = &#x27;定时更新没有轮询到ARP表项的IP地址状态&#x27;</span><br><span class="line">    job1_seconds = 300</span><br><span class="line">    job2_seconds = 300</span><br><span class="line">    # 最大定时任务实例数</span><br><span class="line">    # 此数值是指“比如说你网络卡了30分钟以上，而前一次轮询没有完成，就会堆积到2次轮询任务，大概就是这么个意思”</span><br><span class="line">    SCHEDULER_MAX_INSTANCES = 66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SNMPConfig:</span><br><span class="line">    # 当超过30分钟没有updated_at值更新，则available值置为False；单位：分钟</span><br><span class="line">    REFRESH_TIME = 30</span><br><span class="line">    SNMP_DATA = [</span><br><span class="line">        &#123;&#x27;snmp_host&#x27;: &#x27;192.168.56.10&#x27;, &#x27;snmp_community&#x27;: &#x27;public&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;snmp_host&#x27;: &#x27;192.168.56.20&#x27;, &#x27;snmp_community&#x27;: &#x27;xswl_public&#x27;&#125;,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="4-4-安装库"><a href="#4-4-安装库" class="headerlink" title="4.4 安装库"></a>4.4 安装库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"># 网络不行用下面这个</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/  -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="4-5-运行"><a href="#4-5-运行" class="headerlink" title="4.5 运行"></a>4.5 运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 创建当前版本的数据迁移脚本</span><br><span class="line">flask db init</span><br><span class="line"># 数据迁移脚本</span><br><span class="line">flask db migrate</span><br><span class="line"># 创建数据库</span><br><span class="line">flask db upgrade</span><br><span class="line"></span><br><span class="line"># 在IPGroup表创建一个默认组</span><br><span class="line"># 输入以下命令，填写默认组组，回车使用默认值“Default”，默认组名称随意起都可</span><br><span class="line">flask insert group</span><br><span class="line">Name [default]: </span><br><span class="line"></span><br><span class="line"># [可选]，导入测试数据，如果可以抓到snmp数据不要导入，不然还要逐行删除</span><br><span class="line"> python .\app\test_data.py</span><br><span class="line"></span><br><span class="line"># 启动应用</span><br><span class="line"># 注意2种方式访问端口不一样</span><br><span class="line">python manage.py</span><br><span class="line"># 相关配置在class FlaskConfig中</span><br><span class="line"># 或第二种办法</span><br><span class="line">flask run（建议用此方式）</span><br><span class="line"># 此模式启动仅支持在本机使用固定地址http://127.0.0.1:5000/admin访问，即使修改config.py中相应参数也无效。</span><br><span class="line"># 若想修改默认5000端口并运行通过ip:端口方式访问，请以下面命令运行，并注意放行相关防火墙端口。</span><br><span class="line">flask run -h 0.0.0.0 -p 8080</span><br><span class="line"># -h 后为要监听的网络接口地址，&#x27;0.0.0.0&#x27; 表示监听所有可用的网络接口</span><br><span class="line"># -p 后数字为要修改的服务端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../pic/2024-04-07-ipa1.png"></p><h1 id="五、设置"><a href="#五、设置" class="headerlink" title="五、设置"></a>五、设置</h1><h2 id="5-1-ip子网手动分组"><a href="#5-1-ip子网手动分组" class="headerlink" title="5.1 ip子网手动分组"></a>5.1 ip子网手动分组</h2><p>网页前端设置选项那里可以手动将ip子网（类似192.168.1.0&#x2F;24）创建到新的分组里，支持中文，同时该子网在默认分组里会自动去掉，只显示你创建的分组里。</p><p>注意当某分组内子网有新设备上线后，会自动显示在默认分组中，需要手动重新添加了。</p><h2 id="5-2-关于删除不生效"><a href="#5-2-关于删除不生效" class="headerlink" title="5.2 关于删除不生效"></a>5.2 关于删除不生效</h2><p>需要手动刷新网页</p><h2 id="5-3-预览"><a href="#5-3-预览" class="headerlink" title="5.3 预览"></a>5.3 预览</h2><p>浏览器地址栏输入：127.0.0.1&#x2F;admin&#x2F; ，或者  127.0.0.1[:port]&#x2F;admin&#x2F;</p><h2 id="5-4-批处理文件自启动"><a href="#5-4-批处理文件自启动" class="headerlink" title="5.4 批处理文件自启动"></a>5.4 批处理文件自启动</h2><p>为了最大限度解放打工人，需要做到一键运行乃至开机即启动。</p><h3 id="5-4-1-准备批处理运行环境"><a href="#5-4-1-准备批处理运行环境" class="headerlink" title="5.4.1 准备批处理运行环境"></a>5.4.1 准备批处理运行环境</h3><p>找到AnacondaPrompt(miniconda3)图标，查看图标属性并复制目标栏内内容备用</p><p><img src="/../pic/2024-04-07-ipa2.png"></p><p><code>%windir%\System32\cmd.exe &quot;/K&quot; C:\miniconda3\Scripts\activate.bat C:\miniconda3</code></p><p>复制”&#x2F;K”后面的内容,不要照抄，安装路径都不一定相同</p><p><code>C:\miniconda3\Scripts\activate.bat C:\miniconda3</code></p><h3 id="5-4-2-批处理内容"><a href="#5-4-2-批处理内容" class="headerlink" title="5.4.2 批处理内容"></a>5.4.2 批处理内容</h3><p>为了调用miniconda3，需要在命令前加call，完整批处理内容如下，保存为bat文件即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">call C:\miniconda3\Scripts\activate.bat C:\miniconda3</span><br><span class="line">call activate ipa_base</span><br><span class="line">cd /d C:\ipa_VIEW</span><br><span class="line">call python manage.py</span><br><span class="line">cmd /k</span><br></pre></td></tr></table></figure><p><b>仅供参考</b></p><p>注意：<br>C:\ipa_VIEW是我程序解压的位置，&#x2F;d参数用于跨盘符切换</p><p>cmd &#x2F;k是为了不关闭cmd窗口</p><p>运行效果如下图</p><p><img src="/../pic/2024-04-07-ipa3.png"></p><h1 id="六、预览截图"><a href="#六、预览截图" class="headerlink" title="六、预览截图"></a>六、预览截图</h1><p>参考 <a href="https://kiraster.github.io/gallery/IPA_VIEW_v0.1_Beta/">https://kiraster.github.io/gallery/IPA_VIEW_v0.1_Beta/</a></p><p><img src="/../pic/2024-04-07-ipa4.png"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>2024-4-9 </p><p>1、可以通过scripts代码实现简单加密访问，放到index.html就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT language=JavaScript&gt; </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">password</span></span>() &#123; </span><br><span class="line">var testV = 1; </span><br><span class="line">var pass1 = prompt(<span class="string">&#x27;请输入密码:&#x27;</span>,<span class="string">&#x27;&#x27;</span>); </span><br><span class="line"><span class="keyword">while</span> (testV &lt; 3) &#123; </span><br><span class="line"><span class="keyword">if</span> (!pass1) </span><br><span class="line">history.go(-1); </span><br><span class="line"><span class="keyword">if</span> (pass1 == <span class="string">&quot;这里输入你想设置的密码&quot;</span>) &#123; </span><br><span class="line">alert(<span class="string">&#x27;密码正确!&#x27;</span>); </span><br><span class="line"><span class="built_in">break</span>; </span><br><span class="line">&#125; </span><br><span class="line">testV+=-1; </span><br><span class="line">var pass1 = prompt(<span class="string">&#x27;密码错误!请重新输入:&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (pass1!=<span class="string">&quot;password&quot;</span> &amp; testV ==3) </span><br><span class="line">history.go(-1); </span><br><span class="line"><span class="built_in">return</span> <span class="string">&quot; &quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line">document.write(password()); </span><br><span class="line">&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure><p>2、子网添加分组后，一段时间在default组还会发现同样子网。这是因为又扫描到了新地址。作者CsiR这样回复的：</p><blockquote><p>是，写入sqlite的时候没加判断，分组跑默认值去了</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、项目简介&quot;&gt;&lt;a href=&quot;#一、项目简介&quot; class=&quot;headerlink&quot; title=&quot;一、项目简介&quot;&gt;&lt;/a&gt;一、项目简介&lt;/h1&gt;&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/kiraster/IPA_VIEW_v0.1_Beta&quot;&gt;https://github.com/kiraster/IPA_VIEW_v0.1_Beta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个使用 Flask 框架组装的IP地址管理平台，很简陋&lt;/p&gt;
&lt;p&gt;在配置文件&lt;code&gt;/app/config.py&lt;/code&gt; 配置好指定交换机的snmp v2c 只读团体名称后，可以定时轮询指定交换机的arp数据，将获得的ip、mac地址及轮询时间写进数据库；下一次没有轮询到的已知ip会被设置为离线状态&lt;/p&gt;
&lt;p&gt;这样就可以拿到一份准确的局域网设备数据（包括曾短暂上线后被轮询到但之后离线的）&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="python" scheme="https://bg4vrg.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>重拾我的kindle4-通过calibre-web同步电子书</title>
    <link href="https://bg4vrg.com/post/20240406194632.html"/>
    <id>https://bg4vrg.com/post/20240406194632.html</id>
    <published>2024-04-06T11:46:32.000Z</published>
    <updated>2024-04-06T12:18:11.837Z</updated>
    
    <content type="html"><![CDATA[<p>我的kindle4是十多年前在美亚海淘的，所以需要在美亚上查看接收地址。中亚kindle服务早已关闭，中亚也仅剩下小程序苟延残喘，如果是国行设备，应该需要将设备注册到美亚上。</p><p>查看设置在这里，默认是英文界面，我在首页提前设置了中文</p><span id="more"></span><p>设置地址可以直接访问这里</p><p><code>https://www.amazon.com/hz/mycd/myx#/home/settings/payment</code></p><p><img src="/../pic/2024-04-06-kindle1.png"></p><p><img src="/../pic/2024-04-06-kindle2.png"></p><h1 id="一、kindle接收地址"><a href="#一、kindle接收地址" class="headerlink" title="一、kindle接收地址"></a>一、kindle接收地址</h1><p>我的kindle注册早，还是kindle.cn后缀。这个地址要填到calibre-web作为接收地址</p><h1 id="二、calibre-web发送地址"><a href="#二、calibre-web发送地址" class="headerlink" title="二、calibre-web发送地址"></a>二、calibre-web发送地址</h1><p>一般选择常用个人邮箱地址，并把它填到上图的“已认可的发件人邮箱列表”。</p><p>注意如果使用gmail要保证calibre网络环境可以访问google，我这里用的是qq邮箱。qq邮箱设置要注意，他的密码不是你平常登录qq邮箱的密码，而是单独设定的所谓“授权码”，这需要你用你绑定的手机号码发送一条短信，1毛钱的短信费可比流量贵多了现在。同样需要用户主动发送短信的还有个豆瓣，挺恶心的。</p><p><img src="/../pic/2024-04-06-kindle3.png"></p><p><img src="/../pic/2024-04-06-kindle4.png"></p><p><img src="/../pic/2024-04-06-kindle5.png"></p><p>注意下这里附件大小默认限制25MB，亚马逊好像限制50MB，可以适当改高点。</p><p><img src="/../pic/2024-04-06-kindle6.png" alt="查看任务状态"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的kindle4是十多年前在美亚海淘的，所以需要在美亚上查看接收地址。中亚kindle服务早已关闭，中亚也仅剩下小程序苟延残喘，如果是国行设备，应该需要将设备注册到美亚上。&lt;/p&gt;
&lt;p&gt;查看设置在这里，默认是英文界面，我在首页提前设置了中文&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>部署calibre-web电子书服务</title>
    <link href="https://bg4vrg.com/post/20240330122111.html"/>
    <id>https://bg4vrg.com/post/20240330122111.html</id>
    <published>2024-03-30T04:21:11.000Z</published>
    <updated>2024-03-30T02:57:22.232Z</updated>
    
    <content type="html"><![CDATA[<p>calibre-web可以实现在线阅读、发送到kindle（美区）、刮削书籍信息等功能。唯一缺点就是目录不人性化，导入后会很乱-所有书籍都在一个library目录里，不能像emby那样刮削后仍然保留预先创建的媒体目录。</p><span id="more"></span><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>因为7.1的docker注册表被强了，先进ssh里拉下镜像</p><p><code>docker pull johngong/calibre-web</code></p><p><img src="/../pic/2024-3-24-calibre1.png"></p><h2 id="1-1-以下是cli命令行配置参数"><a href="#1-1-以下是cli命令行配置参数" class="headerlink" title="1.1 以下是cli命令行配置参数"></a>1.1 以下是cli命令行配置参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker create  \</span><br><span class="line">   --name=calibre-web  \</span><br><span class="line">   -p 8083:8083  \</span><br><span class="line">   -p 8080:8080  \</span><br><span class="line">   -v /配置文件位置:/config  \</span><br><span class="line">   -v /书库:/library  \</span><br><span class="line">   -v /自动添加文件夹:/autoaddbooks  \</span><br><span class="line">   -e UID=1000  \</span><br><span class="line">   -e GID=1000  \</span><br><span class="line">   -e CALIBRE_SERVER_USER=用户名  \</span><br><span class="line">   -e CALIBRE_SERVER_PASSWORD=用户密码 \</span><br><span class="line">   --restart unless-stopped  \</span><br><span class="line">   johngong/calibre-web:latest</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量:"></a>变量:</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--name=calibre-web</code></td><td>容器名</td></tr><tr><td><code>-p 8083:8083</code></td><td>calibre-web web访问端口,默认用户名: admin 默认密码: admin123</td></tr><tr><td><code>-p 8080:8080</code></td><td>calibre-server web访问端口</td></tr><tr><td><code>-v /配置文件位置:/config</code></td><td>calibre-web与calibre-server配置位置文件</td></tr><tr><td><code>-v /书库:/library</code></td><td>calibre-web与calibre-server书库默认位置</td></tr><tr><td><code>-v /自动添加文件夹:/autoaddbooks</code></td><td>calibre自动添加图书文件夹位置</td></tr><tr><td><code>-e UID=1000</code></td><td>uid设置,默认为1000</td></tr><tr><td><code>-e GID=1000</code></td><td>gid设置,默认为1000</td></tr><tr><td><code>-e ENABLE_CALIBRE_SERVER=true</code></td><td>(true|false)设定开启calibre-server，默认开启</td></tr><tr><td><code>-e ENABLE_CALIBRE_SERVER_OPDS=false</code></td><td>(true|false)开启calibre-server的OPDS功能，默认不开启，arm可能不可用</td></tr><tr><td><code>-e CALIBRE_SERVER_USER=用户名</code></td><td>calibre-server 用户名</td></tr><tr><td><code>-e CALIBRE_SERVER_PASSWORD=用户密码</code></td><td>calibre-server 用户密码</td></tr><tr><td><code>-e CALIBRE_SERVER_WEB_LANGUAGE=zh_CN</code></td><td>calibre-server web界面语言，默认中文，详见calibre-server其它语言</td></tr><tr><td><code>-e CALIBRE_ASCII_FILENAME=true</code></td><td>(true|false)设定false时calibre支持中文目录</td></tr><tr><td><code>-e CALIBRE_WEB_LANGUAGE=zh_Hans_CN</code></td><td>(zh_Hans_CN|en)calibre-web初始界面语言，详见calibre-web其它语言</td></tr><tr><td><code>-e TZ=Asia/Shanghai</code></td><td>系统时区设置,默认为Asia&#x2F;Shanghai</td></tr><tr><td><code>-e CALIBREDB_OTHER_OPTION=</code></td><td>为自动添加脚本中calibredb命令添加其它参数,例如：duplicates命令[-d]</td></tr><tr><td><code>-e DISABLE_GOOGLE_SEARCH=false</code></td><td>(true|false)设定禁用google搜索，默认不开启</td></tr><tr><td><code>-e DISABLE_SCHOLAR_SEARCH=false</code></td><td>(true|false)设定禁用scholar搜索，默认不开启</td></tr><tr><td><code>-e ENABLE_CHOWN_LIBRARY=true</code></td><td>(true|false)设定修复library文件夹拥有者，默认开启</td></tr><tr><td><code>-e CALIBRE_LOCALHOST=true</code></td><td>(true|false)设定从本地主机和本地网络加载封面，默认开启</td></tr><tr><td><code>-e ENABLE_FIX_COVER_COLOR=false</code></td><td>(true|false)设定修复封面颜色偏暗，默认关闭</td></tr></tbody></table><h2 id="1-2-群晖docker设置："><a href="#1-2-群晖docker设置：" class="headerlink" title="1.2 群晖docker设置："></a>1.2 群晖docker设置：</h2><ol><li>卷</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>本地文件夹1:/library</code></td><td>calibre-web与calibre-server书库默认位置</td></tr><tr><td><code>本地文件夹2:/config</code></td><td>calibre-web与calibre-server配置位置文件</td></tr><tr><td><code>本地文件夹3:/autoaddbooks</code></td><td>calibre自动添加图书文件夹位置</td></tr></tbody></table><ol><li>端口</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>本地端口1:8083</code></td><td>calibre-web web访问端口,默认用户名: admin 默认密码: admin123</td></tr><tr><td><code>本地端口2:8080</code></td><td>calibre-server web访问端口</td></tr></tbody></table><ol><li>环境变量：</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>UID=1000</code></td><td>uid设置,默认为1000</td></tr><tr><td><code>GID=1000</code></td><td>gid设置,默认为1000</td></tr><tr><td><code>ENABLE_CALIBRE_SERVER=true</code></td><td>(true|false)设定开启calibre-server，默认开启</td></tr><tr><td><code>ENABLE_CALIBRE_SERVER_OPDS=false</code></td><td>(true|false)开启calibre-server的OPDS功能，默认不开启，arm可能不可用</td></tr><tr><td><code>CALIBRE_SERVER_USER=</code></td><td>calibre-server 用户名</td></tr><tr><td><code>CALIBRE_SERVER_PASSWORD=</code></td><td>calibre-server 用户密码</td></tr><tr><td><code>CALIBRE_SERVER_WEB_LANGUAGE=zh_CN</code></td><td>calibre-server web界面语言，详见calibre-server其它语言</td></tr><tr><td><code>CALIBRE_ASCII_FILENAME=true</code></td><td>(true|false)设定false时calibre支持中文目录</td></tr><tr><td><code>CALIBRE_WEB_LANGUAGE=zh_Hans_CN</code></td><td>(zh_Hans_CN|en)calibre-web初始界面语言，详见calibre-web其它语言</td></tr><tr><td><code>TZ=Asia/Shanghai</code></td><td>系统时区设置,默认为Asia&#x2F;Shanghai</td></tr><tr><td><code>CALIBREDB_OTHER_OPTION=</code></td><td>为自动添加脚本中calibredb命令添加其它参数,例如：duplicates命令[-d]</td></tr><tr><td><code>DISABLE_GOOGLE_SEARCH=false</code></td><td>(true|false)设定禁用google搜索，默认不开启</td></tr><tr><td><code>DISABLE_SCHOLAR_SEARCH=false</code></td><td>(true|false)设定禁用scholar搜索，默认不开启</td></tr><tr><td><code>ENABLE_CHOWN_LIBRARY=true</code></td><td>(true|false)设定修复library文件夹拥有者，默认开启</td></tr><tr><td><code>CALIBRE_LOCALHOST=true</code></td><td>(true|false)设定从本地主机和本地网络加载封面，默认开启</td></tr><tr><td><code>ENABLE_FIX_COVER_COLOR=false</code></td><td>(true|false)设定修复封面颜色偏暗，默认关闭</td></tr></tbody></table><h2 id="二、用户密码与书记转换"><a href="#二、用户密码与书记转换" class="headerlink" title="二、用户密码与书记转换"></a>二、用户密码与书记转换</h2><ul><li><p>配置calibre-server用户名及密码，可用其上传图书（登录后设置里开启）。</p><p>注意：我这里设置后失效，仍然需要用admin&#x2F;admin1234的默认密码，可能和默认密码强度不够有关。</p></li><li><p>ebook-convert转换其它格式到PDF时需要字体SimSun.ttf，复制到&#x2F;config&#x2F;fonts目录对应的宿主机目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PDF字体设置：复制字体到文件夹，重启docker。</span><br><span class="line">旧：/config/calibre-server/calibrefonts（本地文件夹2/calibre-server/calibrefonts）</span><br><span class="line">新：/config/fonts（本地文件夹2/fonts）</span><br></pre></td></tr></table></figure></li></ul><p> <img src="/../pic/2024-3-24-calibre2.png"></p><h1 id="三、-删除失效刮削api并新增新豆瓣api"><a href="#三、-删除失效刮削api并新增新豆瓣api" class="headerlink" title="三、 删除失效刮削api并新增新豆瓣api"></a>三、 删除失效刮削api并新增新豆瓣api</h1><p>新豆瓣api地址，下载</p><p><code>https://github.com/fugary/calibre-web-douban-api/blob/main/src/NewDouban.py</code></p><p>提前上传到&#x2F;config映射的宿主机目录&#x2F;volume3&#x2F;docker&#x2F;calibre-web&#x2F;config&#x2F;</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker exec -it ae2bf29dda39 /bin/sh  #ae2bf29dda39是容器id</span><br><span class="line">cp /config/NewDouban.py /usr/local/calibre-web/app/cps/metadata_provider/NewDouban.py</span><br></pre></td></tr></table></figure><p>  内置的其他api没用，而且会因为网络不可达导致网页卡死，所以要用rm命令删除其他py文件</p><p><img src="/../pic/2024-3-24-calibre3.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;calibre-web可以实现在线阅读、发送到kindle（美区）、刮削书籍信息等功能。唯一缺点就是目录不人性化，导入后会很乱-所有书籍都在一个library目录里，不能像emby那样刮削后仍然保留预先创建的媒体目录。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="docker" scheme="https://bg4vrg.com/tags/docker/"/>
    
    <category term="calibre-web" scheme="https://bg4vrg.com/tags/calibre-web/"/>
    
  </entry>
  
  <entry>
    <title>seo优化之baidu收录</title>
    <link href="https://bg4vrg.com/post/20240320122111.html"/>
    <id>https://bg4vrg.com/post/20240320122111.html</id>
    <published>2024-03-20T04:21:11.000Z</published>
    <updated>2024-03-20T05:30:45.518Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇<a href="https://bg4vrg.com/post/20240224112601.html">《seo优化之google收录》</a>，本篇记录下百度seo记录。不主动提交，它就是不收入我的博客。</p><span id="more"></span><h1 id="一、生成sitemap文件"><a href="#一、生成sitemap文件" class="headerlink" title="一、生成sitemap文件"></a>一、生成sitemap文件</h1><p>hexo-generator-baidu-sitemap则是针对百度。注意参数加上–no-fund –no-audit，否则会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save-dev --no-fund --no-audit</span><br></pre></td></tr></table></figure><p>安装完成后，重启hexo，执行<code>hexo g &amp;&amp; hexo s</code>后，在public目录下生成对应的xml文件。</p><p>本地可以通过下面地址访问到sitemap文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>确认可以访问到后，部署到网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>确认可以通过你的网站URL访问，比如我的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://bg4vrg.com/baidusitemap.xml</span><br></pre></td></tr></table></figure><h1 id="二、百度添加网站"><a href="#二、百度添加网站" class="headerlink" title="二、百度添加网站"></a>二、百度添加网站</h1><p><img src="/../pic/2024-3-20-baideseo1.png"></p><p><img src="/../pic/2024-3-20-baideseo2.png"></p><p><img src="/../pic/2024-3-20-baideseo3.png"></p><p><img src="/../pic/2024-3-20-baideseo4.png"></p><p><img src="/../pic/2024-3-20-baideseo6.png" alt="image-20240320130642138"></p><p><img src="/../pic/2024-3-20-baideseo5.png" alt="image-20240320130553742"></p><p>目前发现验证完成后，sitemap提交配额为0，暂告一段落，后期有时间搞下api主动提交。</p><p><code>今日提交上限：0条  今日提交余额：0条</code></p><h1 id="三-、-hexo-submit-urls-to-search-engine-插件"><a href="#三-、-hexo-submit-urls-to-search-engine-插件" class="headerlink" title="三 、 hexo-submit-urls-to-search-engine 插件"></a>三 、 hexo-submit-urls-to-search-engine 插件</h1><p>主动推送</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接上篇&lt;a href=&quot;https://bg4vrg.com/post/20240224112601.html&quot;&gt;《seo优化之google收录》&lt;/a&gt;，本篇记录下百度seo记录。不主动提交，它就是不收入我的博客。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="hexo" scheme="https://bg4vrg.com/tags/hexo/"/>
    
    <category term="seo" scheme="https://bg4vrg.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>无氧力量训练步骤分解2019版</title>
    <link href="https://bg4vrg.com/post/20240319195438.html"/>
    <id>https://bg4vrg.com/post/20240319195438.html</id>
    <published>2024-03-19T11:54:38.000Z</published>
    <updated>2024-03-19T13:22:41.359Z</updated>
    
    <content type="html"><![CDATA[<p>这些动作大概是2019年葛总教我的，当时还有京东边上的健身房可以免费训练。可惜随后不久就进入口罩时期，荒废到现在。</p><p>记录下备查，我的目标是小区单双杠能玩哈哈。</p><span id="more"></span><h1 id="第一天（胸部）"><a href="#第一天（胸部）" class="headerlink" title="第一天（胸部）"></a>第一天（胸部）</h1><h2 id="1-1-哑铃卧推"><a href="#1-1-哑铃卧推" class="headerlink" title="1.1 哑铃卧推"></a>1.1 哑铃卧推</h2><p><img src="/pic/liliangxunlian1.jpg"><img src="/pic/liliangxunlian2.jpg"> </p><p><img src="/pic/liliangxunlian3.jpg"><img src="/pic/liliangxunlian4.jpg"> </p><p>​    </p><h2 id="1-2-哑铃飞鸟"><a href="#1-2-哑铃飞鸟" class="headerlink" title="1.2 哑铃飞鸟"></a>1.2 哑铃飞鸟</h2><p><img src="/pic/liliangxunlian5.jpg"> </p><h2 id="替代："><a href="#替代：" class="headerlink" title="替代："></a>替代：</h2><p><img src="/pic/liliangxunlian6.jpg"><img src="/pic/liliangxunlian7.jpg"> </p><h2 id="1-3-蝴蝶、龙门夹胸"><a href="#1-3-蝴蝶、龙门夹胸" class="headerlink" title="1.3 蝴蝶、龙门夹胸"></a>1.3 蝴蝶、龙门夹胸</h2><p> <img src="/pic/liliangxunlian8.jpg"></p><h3 id="1-3-1-调整座位高度"><a href="#1-3-1-调整座位高度" class="headerlink" title="1.3.1 调整座位高度"></a>1.3.1 调整座位高度</h3><p>使把手与你的肩在同一高度，双臂保持微弯状态，注意双臂不要打开过度（打开到背平面就可以了），以免伤到肩关节，重量不要太重，内收时停顿3秒，充分挤压胸大肌。</p><h3 id="1-3-2-呼吸"><a href="#1-3-2-呼吸" class="headerlink" title="1.3.2 呼吸"></a>1.3.2 呼吸</h3><p>每做1次自然呼吸1次。</p><h3 id="1-3-3-注意事项："><a href="#1-3-3-注意事项：" class="headerlink" title="1.3.3 注意事项："></a>1.3.3 <strong>注意事项：</strong></h3><ul><li><p>一定要挺直身体，不借助外力，内夹时要用胸大肌发力，放松还原时要和缓。</p></li><li><p>动作过程中肘关节保持向后和外侧，而不是向下。</p></li><li><p>坐凳高度要合适，否则手把位置过高，锻炼肩三角肌会多一些；</p></li></ul><h1 id="第二天（背和二头）"><a href="#第二天（背和二头）" class="headerlink" title="第二天（背和二头）"></a>第二天（背和二头）</h1><h2 id="2-1-宽拉引体向上"><a href="#2-1-宽拉引体向上" class="headerlink" title="2.1 宽拉引体向上"></a>2.1 宽拉引体向上</h2><p>每组之间休息30-60秒，别超时了</p><p>从70公斤辅助开始做引体向上，先别忙上去就练，先调旁边的配重块，尝试可以做12次，记住这个重量. </p><p>然后第二组减少一块，坚持8次，第三组再减少一块，坚持6次，第四组维持第三组重量，做到做不动. </p><p>三个大循环以后，从第二组的重量来起步12次，小循环依次减少. 做完接着坐姿下拉. </p><p><img src="/pic/liliangxunlian9.jpg"> </p><h2 id="2-2-机械坐姿下拉"><a href="#2-2-机械坐姿下拉" class="headerlink" title="2.2 机械坐姿下拉"></a>2.2 机械坐姿下拉</h2><p>从10公斤开始.</p><p>8-12次一组，四组，不减重量，每次力竭，第四组你可能只能做三个，不要紧</p><h2 id="2-3-哑铃划船"><a href="#2-3-哑铃划船" class="headerlink" title="2.3 哑铃划船"></a>2.3 哑铃划船</h2><p>可以换成<strong>杠铃弯举</strong>、<strong>哑铃弯举</strong></p><h1 id="第三天（肩）"><a href="#第三天（肩）" class="headerlink" title="第三天（肩）"></a>第三天（肩）</h1><ul><li><p>哑铃坐姿推肩</p></li><li><p>哑铃侧平举</p></li><li><p>坐姿反飞鸟</p></li></ul><h1 id="第四天（手臂）"><a href="#第四天（手臂）" class="headerlink" title="第四天（手臂）"></a>第四天（手臂）</h1><ul><li><p>哑铃弯举</p></li><li><p>杠铃弯举</p></li><li><p>龙门架绳索下拉</p></li></ul><p><img src="/pic/liliangxunlian10.jpg"> </p><ul><li>单臂划船</li></ul><p><img src="/pic/liliangxunlian11.jpg"> </p><p><img src="/pic/liliangxunlian12.jpg"> </p><p><img src="/pic/liliangxunlian13.jpg"> </p><p><img src="/pic/liliangxunlian14.jpg"> </p><p><img src="/pic/liliangxunlian15.jpg"> </p><p><img src="/pic/liliangxunlian16.jpg"><br><img src="/pic/liliangxunlian17.jpg"> </p><p><img src="/pic/liliangxunlian18.jpg"><br><img src="/pic/liliangxunlian19.jpg"><br><img src="/pic/liliangxunlian20.jpg"> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这些动作大概是2019年葛总教我的，当时还有京东边上的健身房可以免费训练。可惜随后不久就进入口罩时期，荒废到现在。&lt;/p&gt;
&lt;p&gt;记录下备查，我的目标是小区单双杠能玩哈哈。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="锻炼" scheme="https://bg4vrg.com/tags/%E9%94%BB%E7%82%BC/"/>
    
  </entry>
  
  <entry>
    <title>交换机路由器批量备份程序-SwitchBackup_Pro</title>
    <link href="https://bg4vrg.com/post/20240317114032.html"/>
    <id>https://bg4vrg.com/post/20240317114032.html</id>
    <published>2024-03-17T03:40:32.000Z</published>
    <updated>2024-03-17T10:58:08.510Z</updated>
    
    <content type="html"><![CDATA[<p>github上<a href="https://github.com/xiaomumu8633/SwitchBackup_Pro">xiaomumu8633</a>开源分享的软件，支持SSH2和TELNET方式，支持多厂家（不限于华为中兴思科锐捷H3C等），可根据工作需要任意定制指令。</p><p>其工作原理就是远程登录到交换机上将dis ××× 命令输出的内容保存到一个文本文档内。</p><p>软件作者将python环境封装在main.exe了，我没有测试无python环境下是否影响软件正常工作。</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">本软件支持SSH2和TELNET方式，支持多厂家，可根据工作需要任意定制指令。最后实现的效果是根据你需要的指令，将表格中所有的交换机信息采集到main所在的文件夹下。程序已打包成.exe文件，以免部分内网电脑没有python环境。如果需要定时启动的话目前采用的方案是用win的定时任务来实现。</span><br><span class="line"></span><br><span class="line">使用说明：</span><br><span class="line"></span><br><span class="line">“Network Equipment Info.xlsx”文件作为我们的数据库，运行程序之前将Network Equipment Info.xlsx和main.exe放在同一个文件夹下</span><br><span class="line"></span><br><span class="line">其中“Config”这张sheet用来设定你用来存放需备份的 设备厂商sheet名称 以及 厂商指令sheet名称，可以多行</span><br><span class="line"></span><br><span class="line">设备厂商sheet里头包含该厂家的设备名称（任意）、IP地址、用户名、密码、登录采用的协议（SSH2或者TELNET）</span><br><span class="line"></span><br><span class="line">厂商指令sheet里头包含了厂家所用的指令，可以根据工作需要任意调整</span><br><span class="line"></span><br><span class="line">表格中标橙色的部分不要动，以免程序运行报错</span><br></pre></td></tr></table></figure><p>经过测试：</p><h2 id="1、华三命令和华为略有不同。"><a href="#1、华三命令和华为略有不同。" class="headerlink" title="1、华三命令和华为略有不同。"></a>1、华三命令和华为略有不同。</h2><p>比如华为的<code>screen-length 0 temporary</code>修改为<code>screen-length disable</code></p><h2 id="2、如果telnet无用户名仅密码，那将用户名留空"><a href="#2、如果telnet无用户名仅密码，那将用户名留空" class="headerlink" title="2、如果telnet无用户名仅密码，那将用户名留空"></a>2、如果telnet无用户名仅密码，那将用户名留空</h2><h2 id="3、host列交换机名称"><a href="#3、host列交换机名称" class="headerlink" title="3、host列交换机名称"></a>3、host列交换机名称</h2><p>可以和交换机设置的hostname不同，可以设置为任意中文字符</p><h2 id="4、生成的备份文件在软件目录的bak文件夹"><a href="#4、生成的备份文件在软件目录的bak文件夹" class="headerlink" title="4、生成的备份文件在软件目录的bak文件夹"></a>4、生成的备份文件在软件目录的bak文件夹</h2><p><img src="/pic/2024-3-17-switchbackup.png" alt="程序运行界面"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;github上&lt;a href=&quot;https://github.com/xiaomumu8633/SwitchBackup_Pro&quot;&gt;xiaomumu8633&lt;/a&gt;开源分享的软件，支持SSH2和TELNET方式，支持多厂家（不限于华为中兴思科锐捷H3C等），可根据工作需要任意定制指令。&lt;/p&gt;
&lt;p&gt;其工作原理就是远程登录到交换机上将dis ××× 命令输出的内容保存到一个文本文档内。&lt;/p&gt;
&lt;p&gt;软件作者将python环境封装在main.exe了，我没有测试无python环境下是否影响软件正常工作。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="备份" scheme="https://bg4vrg.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="交换机" scheme="https://bg4vrg.com/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>freenom域名被强制收回临时解决办法</title>
    <link href="https://bg4vrg.com/post/20240317105648.html"/>
    <id>https://bg4vrg.com/post/20240317105648.html</id>
    <published>2024-03-17T02:56:48.000Z</published>
    <updated>2024-03-19T11:51:57.450Z</updated>
    
    <content type="html"><![CDATA[<p>freenom的域名已经大部分处于pending状态了，我的.cf同样被撑过。不过今天在<a href="https://github.com/luolongfei/freenom/releases">github</a>上看到消息说可以发邮件给freenom申请将状态修改为正常状态。有需要的可以试试，我是换成.com了，花钱保平安，更换域名非常麻烦。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已被撤销域名相关执照，所有人的域名都被强制改为 peddling 状态，目前可以通过给 freenom 发邮件请求恢复域名，官方将帮你把域名续期到 9 年后， 不过这个 9 年有可能只是暂时的，大概率后续会直接删域名，所以各位最好尽早使用付费域名替换之。江湖路远，后会有期。更多消息可在热心网友的电报群内交流。</span><br></pre></td></tr></table></figure><p><img src="/pic/2024-3-17-freenom.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;freenom的域名已经大部分处于pending状态了，我的.cf同样被撑过。不过今天在&lt;a href=&quot;https://github.com/luolongfei/freenom/releases&quot;&gt;github&lt;/a&gt;上看到消息说可以发邮件给freenom申请将状态修改为正常状态。有需要的可以试试，我是换成.com了，花钱保平安，更换域名非常麻烦。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="域名" scheme="https://bg4vrg.com/tags/%E5%9F%9F%E5%90%8D/"/>
    
    <category term="freenom" scheme="https://bg4vrg.com/tags/freenom/"/>
    
  </entry>
  
  <entry>
    <title>解决aprs.fi无法显示地图</title>
    <link href="https://bg4vrg.com/post/20240316110600.html"/>
    <id>https://bg4vrg.com/post/20240316110600.html</id>
    <published>2024-03-16T03:06:00.000Z</published>
    <updated>2024-03-16T03:18:44.927Z</updated>
    
    <content type="html"><![CDATA[<p>aprs.fi已经很久无法显示正常地图页面了。</p><p>之前是因为google被墙，后来aprs.fi运营因为google map api费用太高选择了openstreetmap这个用户自建图源，但可惜的是2022年osm还是被墙。</p><p>我试了下修改host无效，只能通过工具绕过了。</p><p>国内用户为了方便，建议使用aprs.tv。</p><span id="more"></span><p>OpenStreetMap 是<em>开放数据</em>:只要您表明使用了 OpenStreetMap 并承认其贡献者的工作，您就可以使用 OpenStreetMap。如果您改变或者使用这些数据，您必须按照相同的版权协议发布结果。详情请参见<a href="https://www.openstreetmap.org/copyright">著作权与许可</a>。</p><p><strong>Q</strong>: <em>怎么被屏蔽的，使用什么方法？</em></p><p>A: </p><ul><li><p>和维基百科相同的 DNS 污染，劫持后缀为 openstreetmap.org 域名的 DNS 查询，注入伪造结果，伪造结果中的IP不可达或者已被封锁。这体现在浏览器中的“连接超时”错误。</p></li><li><p>深度包检测，发起HTTPS连接时检测到后缀为 openstreetmap.org 的 SNI 即发起 TCP 重置攻击。这体现在浏览器中的“连接被重置”错误。</p></li></ul><p><strong>Q</strong>: <em>如何绕过？</em></p><p>A:</p><ul><li>域前置</li><li>TCB desync</li><li>使用工具。不必多说。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;aprs.fi已经很久无法显示正常地图页面了。&lt;/p&gt;
&lt;p&gt;之前是因为google被墙，后来aprs.fi运营因为google map api费用太高选择了openstreetmap这个用户自建图源，但可惜的是2022年osm还是被墙。&lt;/p&gt;
&lt;p&gt;我试了下修改host无效，只能通过工具绕过了。&lt;/p&gt;
&lt;p&gt;国内用户为了方便，建议使用aprs.tv。&lt;/p&gt;</summary>
    
    
    
    <category term="业余无线电" scheme="https://bg4vrg.com/categories/AmateurRadio/"/>
    
    
    <category term="业余无线电" scheme="https://bg4vrg.com/tags/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    <category term="aprs" scheme="https://bg4vrg.com/tags/aprs/"/>
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>业余无线电aredn固件刷回原厂unifi</title>
    <link href="https://bg4vrg.com/post/20240315130414.html"/>
    <id>https://bg4vrg.com/post/20240315130414.html</id>
    <published>2024-03-15T05:04:14.000Z</published>
    <updated>2024-04-18T08:32:50.300Z</updated>
    
    <content type="html"><![CDATA[<p>aredn固件刷完之后一直没玩，想办法刷回unifi原厂固件继续搭建网桥使用。</p><span id="more"></span><p>如果您已尝试使用重置按钮将 Ubiquiti ISP 无线设备（例如，airMAX、airFiber、LTU）重置为出厂默认值，但您无法访问该设备，我们建议您执行 TFTP 恢复。</p><p>通过重新加载新固件来恢复设备，此过程也可用于恢复在没有其他解决方案起作用时出现故障的设备。</p><p><strong>警告：</strong>固件升级过程中请勿 关闭<strong>、</strong>重启或断开设备电源，否则可能会损坏设备。</p><h1 id="一、要求"><a href="#一、要求" class="headerlink" title="一、要求"></a>一、要求</h1><p><strong>在开始之前，请确保具备以下条件：</strong></p><ul><li><p>按下重置按钮的窄工具（如回形针）</p></li><li><p>以太网电缆</p></li><li><p>PC上运行的TFTP客户端</p></li><li><p>正确的airOS 固件。所有固件都可以从<a href="https://www.ui.com/download/">下载部分</a>下载（使用左侧菜单查找正确的产品类别和固件）。</p></li><li><p>使用的固件取决于：</p><ul><li><p>与产品（例如airMAX M 或AC 型号）兼容的固件。</p></li><li><p>版本。</p><p>最初您必须<strong>使用与设备运行的相同的airOS 固件</strong>。</p><p>设备恢复后，通过 WebUI 定期升级到最新的 AirOS 固件。</p></li></ul></li></ul><p><strong>重要的 TFTP 更改</strong></p><ul><li>自 v6.3.0 起，处于 TFTP 模式的 airMAX M 设备将尝试通过 DHCP 获取 IP 地址并响应来自WiFiman Desktop和 WiFiman Mobile Android) &#x2F; iOS的发现请求</li><li>如果不存在 DHCP 服务器或无法通过 DHCP 获取 IP，无线电将恢复为 192.168.1.20</li><li>对于固件&gt; &#x3D; 2.8.0的airCube，您可以刷新&gt; &#x3D; 2.8.1</li><li>对于固件&lt;2.8.0的airCube，您可以刷新&lt;&#x3D;2.8.0</li></ul><h1 id="二、步骤：Windows-的恢复过程"><a href="#二、步骤：Windows-的恢复过程" class="headerlink" title="二、步骤：Windows 的恢复过程"></a>二、步骤：Windows 的恢复过程</h1><h2 id="2-1-关闭设备电源。"><a href="#2-1-关闭设备电源。" class="headerlink" title="2.1 关闭设备电源。"></a>2.1 关闭设备电源。</h2><h2 id="2-2-配置您的计算机"><a href="#2-2-配置您的计算机" class="headerlink" title="2.2 配置您的计算机"></a>2.2 配置您的计算机</h2><p>必须使用以下设置手动配置 Windows PC 的以太网（在网络连接下）：<br>   IP 地址：192.168.1.254，子网掩码：255.255.255.0</p><h2 id="2-3-将您的设备连接到电脑。"><a href="#2-3-将您的设备连接到电脑。" class="headerlink" title="2.3 将您的设备连接到电脑。"></a>2.3 将您的设备连接到电脑。</h2><h2 id="2-4-按设备上的重置按钮。"><a href="#2-4-按设备上的重置按钮。" class="headerlink" title="2.4 按设备上的重置按钮。"></a>2.4 按设备上的重置按钮。</h2><p>将节点的以太网电缆插入PoE 适配器上的<em>POE</em>端口时按住重置按钮，将 Ubiquiti 设备置于 TFTP 模式。继续按住设备的重置按钮大约 8秒松开重置按钮，等待30 到 45 秒，直到看到节点上的 LED 指示灯以 1-3、2-4、1-3、2-4 模式交替变化。过一会就可以ping通192.168.1.20了。</p><p>如果没有进入13、24交替闪灯模式，可能是没按住reset按钮，多试几次，或者一直长按直到13、24交替闪灯再松开。</p><h2 id="2-5-对于airCube（ISP-和AC）："><a href="#2-5-对于airCube（ISP-和AC）：" class="headerlink" title="2.5  对于airCube（ISP 和AC）："></a>2.5  <strong>对于airCube（ISP 和AC）：</strong></h2><p>按下重置按钮并按住，同时为设备供电。LED 面板应快速闪烁几次，继续按住重置按钮，LED 应关闭。现在您可以松开重置按钮，LED 将缓慢闪烁 3 次。</p><h2 id="2-6-确保设备响应-ping"><a href="#2-6-确保设备响应-ping" class="headerlink" title="2.6 确保设备响应 ping"></a>2.6 确保设备响应 ping</h2><p>（从 DOS 窗口执行<em>ping 192.168.1.20</em> ）<br>如果没有响应，请返回第一步并重复。<br>如果您没有收到回复，请参阅顶部“注释和要求”下有关 TFTP 更改的注释。</p><p>   <img src="/pic/2024-03-15-unifi1.PNG"></p><p>   <img src="/pic/2024-03-15-unifi2.PNG"></p><h2 id="2-7-使用TFTP客户端软件（二进制模式）将固件映像文件（-bin-）上传到192-168-1-20。"><a href="#2-7-使用TFTP客户端软件（二进制模式）将固件映像文件（-bin-）上传到192-168-1-20。" class="headerlink" title="2.7  使用TFTP客户端软件（二进制模式）将固件映像文件（.bin ）上传到192.168.1.20。"></a>2.7  使用TFTP客户端软件（二进制模式）将固件映像文件（.bin ）上传到192.168.1.20。</h2><p>   Windows 集成命令行 TFTP 客户端或下载第三方实用程序来上传 airOS 固件。</p><ol><li><p>在 Windows PC 上，您可以从 DOS 窗口使用 TFTP 命令行 (START&gt;&gt;&gt;CMD)： </p><p><img src="/pic/2024-03-15-unifi3.PNG"></p></li><li><p>进入与固件相同的目录结构（例如，假设您已将映像文件存储在<em>c:\firmware</em> 目录中，请键入命令 : <code>cd c:\firmware</code>）并输入以下内容（如需帮助，请键入 TFTP -h），例如：</p><p><code>tftp -i 192.168.1.20 put WA.v8.5.0.36727.180118.1314.bin</code></p><p><img src="/pic/2024-03-15-unifi4.PNG"></p><p><b><span style="color:rgb(255, 0, 0);">非常重要：1、请务必关闭Windows防火墙，否则会提示“连接请求失败”！2、如果进入tftp模式后ping不通192.168.1.20，请使用傻瓜交换机连接电脑和unifi设备，不要直连到电脑网卡上。</span></b></p></li></ol><h2 id="2-8-刷回固件"><a href="#2-8-刷回固件" class="headerlink" title="2.8. 刷回固件"></a>2.8. 刷回固件</h2><p>升级过程中，信号 LED 将从左到右4格快速闪烁。等待大约 7-10 分钟（取决于设备和固件）。请记住，在操作过程中不要关闭设备电源。</p><p>unifi固件升级后默认地址仍为192.168.1.20</p><h2 id="2-9-升级unifi最新版本"><a href="#2-9-升级unifi最新版本" class="headerlink" title="2.9 升级unifi最新版本"></a>2.9 升级unifi最新版本</h2><p>​设备重新上线后，请通过 WebUI 升级到最新的 AirOS 固件。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;aredn固件刷完之后一直没玩，想办法刷回unifi原厂固件继续搭建网桥使用。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="业余无线电" scheme="https://bg4vrg.com/tags/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="unifi" scheme="https://bg4vrg.com/tags/unifi/"/>
    
    <category term="aredn" scheme="https://bg4vrg.com/tags/aredn/"/>
    
  </entry>
  
  <entry>
    <title>windows远程桌面mstsc操作时隐藏讨人闲的顶端状态栏</title>
    <link href="https://bg4vrg.com/post/20240313191001.html"/>
    <id>https://bg4vrg.com/post/20240313191001.html</id>
    <published>2024-03-13T11:10:01.000Z</published>
    <updated>2024-03-13T13:48:05.442Z</updated>
    
    <content type="html"><![CDATA[<p>平时工作一般都是远程到一台windows server 2019上操作，比如微信就是24小时在线，浏览网页正常也在这里，除了观看视频、打游戏不行，日常使用都很舒坦。</p><p>不过一直有个很惹人厌的小麻烦，远程桌面登录后会在顶部出现远程服务器信息的一个小小的状态栏，虽然可以自动隐藏，但是鼠标一不小心移动到桌面顶端后，状态栏会自动出现。现在浏览器的标签页一般都是在顶端，所以会极大概率触发这一事件。</p><p>以前解决办法是将这个状态栏左右缩小，勉强使用。不过在关闭重新连接远程服务器后，并不能记忆原先“缩小状态栏”，还是默认的长条。此外，这个状态栏只能在顶端水平移动，不能像输入法那样满屏任意移动。</p><span id="more"></span><p><b><span style="color:rgb(255, 1, 0);">解决办法很简单：取消勾选“显示”标签左下方的“全屏显示时显示连接栏”。</span></b></p><p>这样当再次远程桌面到远端服务器后，仅在刚登陆那几秒钟会在顶端短暂出现显示有ip地址信息内容的状态栏，之后即使鼠标放上去也不会自动出现状态栏了。</p><p>如果需要了解当前是否操作远程桌面，或者想关闭远程桌面，使用热键“CTRL+ALT+HOME”即可呼叫出顶端状态栏。</p><p>当然，呼叫出的状态栏也是只出现几秒钟，要抓紧时间操作。</p><p><img src="/../pic/2024-3-13-mstsc.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;平时工作一般都是远程到一台windows server 2019上操作，比如微信就是24小时在线，浏览网页正常也在这里，除了观看视频、打游戏不行，日常使用都很舒坦。&lt;/p&gt;
&lt;p&gt;不过一直有个很惹人厌的小麻烦，远程桌面登录后会在顶部出现远程服务器信息的一个小小的状态栏，虽然可以自动隐藏，但是鼠标一不小心移动到桌面顶端后，状态栏会自动出现。现在浏览器的标签页一般都是在顶端，所以会极大概率触发这一事件。&lt;/p&gt;
&lt;p&gt;以前解决办法是将这个状态栏左右缩小，勉强使用。不过在关闭重新连接远程服务器后，并不能记忆原先“缩小状态栏”，还是默认的长条。此外，这个状态栏只能在顶端水平移动，不能像输入法那样满屏任意移动。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="mstsc" scheme="https://bg4vrg.com/tags/mstsc/"/>
    
    <category term="远程桌面" scheme="https://bg4vrg.com/tags/%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>docker安装青龙面板实现自动签到smzdm</title>
    <link href="https://bg4vrg.com/post/20240313140846.html"/>
    <id>https://bg4vrg.com/post/20240313140846.html</id>
    <published>2024-03-13T06:08:46.000Z</published>
    <updated>2024-03-13T13:48:49.474Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现smzdm张大妈断签了，检查后发现之前部署的签到服务很久没更新，大概作者放弃了。咱转战青龙面板吧，拖羊毛档的福，热度一直比较高，相关脚本更新也很快。</p><p>目前使用的是一台黑群晖，版本7.1。准备使用docker方式部署。</p><span id="more"></span><h1 id="一、安装青龙面板"><a href="#一、安装青龙面板" class="headerlink" title="一、安装青龙面板                                     "></a><span style='color:white;background:orange;'>一、安装青龙面板                                     </span></h1><p>青龙面板项目地址<a href="https://github.com/whyour/qinglong">在这里</a></p><p>完整的命令代码如下，注意看注释。部分选项是非必要的，比如部署路径。此外第二行的冒号前为宿主机真实挂载路径，冒号后边是容器内部的路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">  -v $PWD/ql/data:/ql/data \</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">冒号后面的 5700 为默认端口，如果设置了 QlPort, 需要跟 QlPort 保持一致</span></span><br><span class="line">  -p 5700:5700 \</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">部署路径非必须，比如 /test</span></span><br><span class="line">  -e QlBaseUrl=&quot;/&quot; \</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">部署端口非必须，当使用 host 模式时，可以设置服务启动后的端口，默认 5700</span></span><br><span class="line">  -e QlPort=&quot;5700&quot; \</span><br><span class="line">  --name qinglong \</span><br><span class="line">  --hostname qinglong \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  whyour/qinglong:latest</span><br></pre></td></tr></table></figure><p>我这里是群晖，因为镜像搜不到（墙了），所以需要先用下面命令拉下镜像。当然，你也可以用上面的纯命令模式。</p><h2 id="1-1-群晖ssh拉最新镜像"><a href="#1-1-群晖ssh拉最新镜像" class="headerlink" title="1.1 群晖ssh拉最新镜像"></a>1.1 群晖ssh拉最新镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull whyour/qinglong:latest</span><br></pre></td></tr></table></figure><h2 id="1-2-群晖docker面板找到镜像并启动"><a href="#1-2-群晖docker面板找到镜像并启动" class="headerlink" title="1.2 群晖docker面板找到镜像并启动"></a>1.2 群晖docker面板找到镜像并启动</h2><p><img src="/pic/2024-3-12-ql1.png"></p><h2 id="1-3-设置启动后的容器名称"><a href="#1-3-设置启动后的容器名称" class="headerlink" title="1.3 设置启动后的容器名称"></a>1.3 设置启动后的容器名称</h2><p>不支持中文，只支持小写字母和数字；高级设置里可以</p><p><img src="/pic/2024-3-12-ql2.png" alt="image-20240313200805636"></p><h2 id="1-4-设置外部访问端口"><a href="#1-4-设置外部访问端口" class="headerlink" title="1.4 设置外部访问端口"></a>1.4 设置外部访问端口</h2><p><img src="/pic/2024-3-12-ql3.png"></p><h2 id="1-5-设置青龙面板配置文件映射路径"><a href="#1-5-设置青龙面板配置文件映射路径" class="headerlink" title="1.5 设置青龙面板配置文件映射路径"></a>1.5 设置青龙面板配置文件映射路径</h2><p>左侧为物理机真实路径，右侧默认为&#x2F;ql&#x2F;data</p><p><img src="/pic/2024-3-12-ql4.png"></p><p><img src="/pic/2024-3-12-ql5.png"></p><h2 id="1-6-检查配置并启动容器"><a href="#1-6-检查配置并启动容器" class="headerlink" title="1.6 检查配置并启动容器"></a>1.6 检查配置并启动容器</h2><p>大概看下配置是否出错，没问题的话就点击完成按钮，启动青龙面板开始初始化配置。</p><p><img src="/pic/2024-3-12-ql6.png"></p><h1 id="二、初始化青龙面板，安装相关依赖和脚本"><a href="#二、初始化青龙面板，安装相关依赖和脚本" class="headerlink" title="二、初始化青龙面板，安装相关依赖和脚本"></a><span style='color:white;background:orange;'>二、初始化青龙面板，安装相关依赖和脚本</span></h1><h2 id="2-1-访问青龙面板地址"><a href="#2-1-访问青龙面板地址" class="headerlink" title="2.1 访问青龙面板地址"></a>2.1 访问青龙面板地址</h2><p>地址为你的群晖宿主机地址后加端口号5700，例如这样</p><p><a href="http://192.168.10.12:5700/">http://192.168.10.12:5700</a></p><p>进去之后按照提示，在账户设置那里创建帐号密码；通知设置里如没有bark之类app，可以跳过，后期进入青龙面板后再添加。</p><h2 id="2-2-安装linux依赖"><a href="#2-2-安装linux依赖" class="headerlink" title="2.2 安装linux依赖"></a>2.2 安装linux依赖</h2><p><img src="/pic/2024-3-12-ql7.png"></p><p>创建依赖，类型选择“linux”，在名称里输入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc g++ make libffi-dev openssl-dev</span><br></pre></td></tr></table></figure><p><img src="/pic/2024-3-12-ql8.png"></p><p>点击确定，等待安装完成。</p><p><img src="/pic/2024-3-12-ql9.png"></p><h2 id="2-3-安装python3依赖"><a href="#2-3-安装python3依赖" class="headerlink" title="2.3 安装python3依赖"></a>2.3 安装python3依赖</h2><p>同上步，创建依赖，选择python3，输入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dailycheckin</span><br></pre></td></tr></table></figure><p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20240313204809463.png" alt="image-20240313204809463"></p><p>点击确定，等待安装完成。</p><p><img src="/pic/2024-3-12-ql10.png"></p><h1 id="三、配置青龙脚本"><a href="#三、配置青龙脚本" class="headerlink" title="三、配置青龙脚本"></a><span style='color:white;background:orange;'>三、配置青龙脚本</span></h1><p><span style='color:white;background:red;font-size:16px;'>请务必到 <a href="https://www.json.cn/">https://www.json.cn/(opens in a new tab)</a> 网站检查 <code>config.json</code> 文件格式是否正确！</span></p><p>报错一般都是因为缺少转义符号“\”。</p><h2 id="3-1-创建config-json"><a href="#3-1-创建config-json" class="headerlink" title="3.1 创建config.json"></a>3.1 创建config.json</h2><p>如下图，在“脚本管理”中创建类型为“空文件”，名称为config.json的文件。</p><p><img src="/pic/2024-3-12-ql11.png"></p><p><img src="/pic/2024-3-12-ql12.png"></p><h2 id="3-2-拉取config内容"><a href="#3-2-拉取config内容" class="headerlink" title="3.2 拉取config内容"></a>3.2 拉取config内容</h2><p>以下是一份<a href="https://sitoi.github.io/dailycheckin/settings/config/#%E7%A4%BA%E4%BE%8B%E6%96%87%E4%BB%B6">默认的 <code>config.json</code></a> 配置文件，你可以直接复制到你的 <code>config.json</code> 文件中，然后修改其中的参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;BARK_URL&quot;: &quot;&quot;,</span><br><span class="line">  &quot;COOLPUSHEMAIL&quot;: true,</span><br><span class="line">  &quot;COOLPUSHQQ&quot;: true,</span><br><span class="line">  &quot;COOLPUSHSKEY&quot;: &quot;&quot;,</span><br><span class="line">  &quot;COOLPUSHWX&quot;: true,</span><br><span class="line">  &quot;DINGTALK_ACCESS_TOKEN&quot;: &quot;&quot;,</span><br><span class="line">  &quot;DINGTALK_SECRET&quot;: &quot;&quot;,</span><br><span class="line">  &quot;FSKEY&quot;: &quot;&quot;,</span><br><span class="line">  &quot;PUSHPLUS_TOKEN&quot;: &quot;&quot;,</span><br><span class="line">  &quot;PUSHPLUS_TOPIC&quot;: &quot;&quot;,</span><br><span class="line">  &quot;QMSG_KEY&quot;: &quot;&quot;,</span><br><span class="line">  &quot;QMSG_TYPE&quot;: &quot;&quot;,</span><br><span class="line">  &quot;QYWX_AGENTID&quot;: &quot;&quot;,</span><br><span class="line">  &quot;QYWX_CORPID&quot;: &quot;&quot;,</span><br><span class="line">  &quot;QYWX_CORPSECRET&quot;: &quot;&quot;,</span><br><span class="line">  &quot;QYWX_KEY&quot;: &quot;&quot;,</span><br><span class="line">  &quot;QYWX_MEDIA_ID&quot;: &quot;&quot;,</span><br><span class="line">  &quot;QYWX_TOUSER&quot;: &quot;&quot;,</span><br><span class="line">  &quot;SCKEY&quot;: &quot;&quot;,</span><br><span class="line">  &quot;SENDKEY&quot;: &quot;&quot;,</span><br><span class="line">  &quot;TG_API_HOST&quot;: &quot;&quot;,</span><br><span class="line">  &quot;TG_BOT_TOKEN&quot;: &quot;&quot;,</span><br><span class="line">  &quot;TG_PROXY&quot;: &quot;&quot;,</span><br><span class="line">  &quot;TG_USER_ID&quot;: &quot;&quot;,</span><br><span class="line">  &quot;MERGE_PUSH&quot;: &quot;&quot;,</span><br><span class="line">  &quot;ACFUN&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;password&quot;: &quot;Sitoi&quot;,</span><br><span class="line">      &quot;phone&quot;: &quot;18888xxxxxx&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;password&quot;: &quot;多账号 密码填写，请参考上面&quot;,</span><br><span class="line">      &quot;phone&quot;: &quot;多账号 手机号填写，请参考上面&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;ALIYUN&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;refresh_token&quot;: &quot;599dcf65xxxxxx&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;refresh_token&quot;: &quot;多账号 refresh_token&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;AOLAXING&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;BT_AUTO_tt_common=; Hm_lpvt_7fc3681c21a26a2022ae0ca72e2d6fa5=xxxxxx; BT_LOGIN_tt_common=:187xxxxxx; Hm_lvt_7fc3681c21a26a2022ae0ca72e2d6fa5=xxxxxx;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;BAIDU&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;data_url&quot;: &quot;https://fastly.jsdelivr.net/gh/Sitoi/Sitoi.github.io/baidu_urls.txt&quot;,</span><br><span class="line">      &quot;submit_url&quot;: &quot;http://data.zz.baidu.com/urls?site=https://sitoi.cn&amp;token=xxxxxx&quot;,</span><br><span class="line">      &quot;times&quot;: 10</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;data_url&quot;: &quot;多账号 data_url 链接地址，以实际获取为准&quot;,</span><br><span class="line">      &quot;submit_url&quot;: &quot;多账号 submit_url 链接地址，以实际获取为准&quot;,</span><br><span class="line">      &quot;times&quot;: 10</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;BILIBILI&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;coin_num&quot;: 0,</span><br><span class="line">      &quot;coin_type&quot;: 1,</span><br><span class="line">      &quot;cookie&quot;: &quot;_uuid=xxxxxx; rpdid=xxxxxx; LIVE_BUVID=xxxxxx; PVID=xxxxxx; blackside_state=xxxxxx; CURRENT_FNVAL=xxxxxx; buvid3=xxxxxx; fingerprint3=xxxxxx; fingerprint=xxxxxx; buivd_fp=xxxxxx; buvid_fp_plain=xxxxxx; DedeUserID=xxxxxx; DedeUserID__ckMd5=xxxxxx; SESSDATA=xxxxxx; bili_jct=xxxxxx; bsource=xxxxxx; finger=xxxxxx; fingerprint_s=xxxxxx;&quot;,</span><br><span class="line">      &quot;silver2coin&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;coin_num&quot;: 0,</span><br><span class="line">      &quot;coin_type&quot;: 1,</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;,</span><br><span class="line">      &quot;silver2coin&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;IMAOTAI&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;city&quot;: &quot;上海市&quot;,</span><br><span class="line">      &quot;lat&quot;: &quot;3.025626&quot;,</span><br><span class="line">      &quot;lng&quot;: &quot;3.025626&quot;,</span><br><span class="line">      &quot;mobile&quot;: &quot;18888xxxxxx&quot;,</span><br><span class="line">      &quot;province&quot;: &quot;上海市&quot;,</span><br><span class="line">      &quot;token&quot;: &quot;eyJxxxxxx&quot;,</span><br><span class="line">      &quot;userid&quot;: &quot;1xxxxxx4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;city&quot;: &quot;多账号 城市&quot;,</span><br><span class="line">      &quot;lat&quot;: &quot;多账号 纬度&quot;,</span><br><span class="line">      &quot;lng&quot;: &quot;多账号 经度&quot;,</span><br><span class="line">      &quot;mobile&quot;: &quot;多账号 手机号&quot;,</span><br><span class="line">      &quot;province&quot;: &quot;多账号 省份&quot;,</span><br><span class="line">      &quot;token&quot;: &quot;多账号 token&quot;,</span><br><span class="line">      &quot;userid&quot;: &quot;多账号 用户 id&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;IQIYI&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;__dfp=xxxxxx; QP0013=xxxxxx; QP0022=xxxxxx; QYABEX=xxxxxx; P00001=xxxxxx; P00002=xxxxxx; P00003=xxxxxx; P00007=xxxxxx; QC163=xxxxxx; QC175=xxxxxx; QC179=xxxxxx; QC170=xxxxxx; P00010=xxxxxx; P00PRU=xxxxxx; P01010=xxxxxx; QC173=xxxxxx; QC180=xxxxxx; P00004=xxxxxx; QP0030=xxxxxx; QC006=xxxxxx; QC007=xxxxxx; QC008=xxxxxx; QC010=xxxxxx; nu=xxxxxx; __uuid=xxxxxx; QC005=xxxxxx;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;KGQQ&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;muid=xxxxxx; uid=xxxxxx; userlevel=xxxxxx; openid=xxxxxx; openkey=xxxxxx; opentype=xxxxxx; qrsig=xxxxxx; pgv_pvid=xxxxxx;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;MIMOTION&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;max_step&quot;: &quot;20000&quot;,</span><br><span class="line">      &quot;min_step&quot;: &quot;10000&quot;,</span><br><span class="line">      &quot;password&quot;: &quot;Sitoi&quot;,</span><br><span class="line">      &quot;phone&quot;: &quot;18888xxxxxx&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;max_step&quot;: &quot;多账号 最大步数填写，请参考上面&quot;,</span><br><span class="line">      &quot;min_step&quot;: &quot;多账号 最小步数填写，请参考上面&quot;,</span><br><span class="line">      &quot;password&quot;: &quot;多账号 密码填写，请参考上面&quot;,</span><br><span class="line">      &quot;phone&quot;: &quot;多账号 手机号填写，请参考上面&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;SMZDM&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;__ckguid=xxxxxx&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;TIEBA&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;BIDUPSID=xxxxxx; PSTM=xxxxxx; BAIDUID=xxxxxx; BAIDUID_BFESS=xxxxxx; delPer=xxxxxx; PSINO=xxxxxx; H_PS_PSSID=xxxxxx; BA_HECTOR=xxxxxx; BDORZ=xxxxxx; TIEBA_USERTYPE=xxxxxx; st_key_id=xxxxxx; BDUSS=xxxxxx; BDUSS_BFESS=xxxxxx; STOKEN=xxxxxx; TIEBAUID=xxxxxx; ab_sr=xxxxxx; st_data=xxxxxx; st_sign=xxxxxx;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;V2EX&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;_ga=xxxxxx; __cfduid=xxxxxx; PB3_SESSION=xxxxxx; A2=xxxxxx; V2EXSETTINGS=xxxxxx; V2EX_REFERRER=xxxxxx; V2EX_LANG=xxxxxx; _gid=xxxxxx; V2EX_TAB=xxxxxx;&quot;,</span><br><span class="line">      &quot;proxy&quot;: &quot;使用代理的信息，无密码例子: http://127.0.0.1:1080 有密码例子: http://username:password@127.0.0.1:1080&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;,</span><br><span class="line">      &quot;proxy&quot;: &quot;使用代理的信息，无密码例子: http://127.0.0.1:1080 有密码例子: http://username:password@127.0.0.1:1080&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  &quot;YOUDAO&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;JSESSIONID=xxxxxx; __yadk_uid=xxxxxx; OUTFOX_SEARCH_USER_ID_NCOO=xxxxxx; YNOTE_SESS=xxxxxx; YNOTE_PERS=xxxxxx; YNOTE_LOGIN=xxxxxx; YNOTE_CSTK=xxxxxx; _ga=xxxxxx; _gid=xxxxxx; _gat=xxxxxx; PUBLIC_SHARE_18a9dde3de846b6a69e24431764270c4=xxxxxx;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遇到特殊字符如双引号&quot; 请加反斜杠转义，否则报错。</p><p><span style='color:white;background:red;font-size:16px;'>修改脚本后，请务必到 <a href="https://www.json.cn/">https://www.json.cn/(opens in a new tab)</a> 网站检查 <code>config.json</code> 文件格式是否正确！</span></p><h1 id="四、抓取相关网站cookies"><a href="#四、抓取相关网站cookies" class="headerlink" title="四、抓取相关网站cookies"></a><span style='color:white;background:orange;'>四、抓取相关网站cookies</span></h1><p>相关网站教程<a href="https://sitoi.github.io/dailycheckin/settings/acfun/">看这里</a>。</p><p>以smzdm.com什么值得买为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;SMZDM&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;__ckguid=xxxxxx&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;cookie&quot;: &quot;多账号 cookie 填写，请参考上面，cookie 以实际获取为准（遇到特殊字符如双引号\&quot; 请加反斜杠转义）&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1-打开官网"><a href="#4-1-打开官网" class="headerlink" title="4.1 打开官网"></a>4.1 打开官网</h3><p>进入<a href="https://www.smzdm.com/">什么值得买(opens in a new tab)</a></p><h3 id="4-2-打开开发者工具"><a href="#4-2-打开开发者工具" class="headerlink" title="4.2 打开开发者工具"></a>4.2 打开开发者工具</h3><p>按 <code>F12</code> 打开开发者工具，刷新页面</p><h3 id="4-3-点击-Network-标签"><a href="#4-3-点击-Network-标签" class="headerlink" title="4.3 点击 Network 标签"></a>4.3 点击 Network 标签</h3><h3 id="4-4-选择-Doc-标签"><a href="#4-4-选择-Doc-标签" class="headerlink" title="4.4 选择 Doc 标签"></a>4.4 选择 Doc 标签</h3><h3 id="4-5选中-www-smzdm-com-opens-in-a-new-tab"><a href="#4-5选中-www-smzdm-com-opens-in-a-new-tab" class="headerlink" title="4.5选中 www.smzdm.com(opens in a new tab)"></a>4.5选中 <a href="http://www.smzdm.com/">www.smzdm.com(opens in a new tab)</a></h3><h3 id="4-6下滑找到-cookie-全选复制即可"><a href="#4-6下滑找到-cookie-全选复制即可" class="headerlink" title="4.6下滑找到 cookie 全选复制即可"></a>4.6下滑找到 cookie 全选复制即可</h3><p><img src="/pic/2024-3-12-ql13.png"></p><h1 id="五、添加自动任务"><a href="#五、添加自动任务" class="headerlink" title="五、添加自动任务"></a><span style='color:white;background:orange;'>五、添加自动任务</span></h1><h2 id="5-1-定时运行全部脚本"><a href="#5-1-定时运行全部脚本" class="headerlink" title="5.1　定时运行全部脚本"></a>5.1　定时运行全部脚本</h2><p>在“定时任务”中创建任务</p><p>任务名称随便填</p><p>任务命令为</p><p><code>task dailycheckin</code></p><p>定时规则</p><p><code>10 5 * * *</code></p><p>表示每天5点10分运行一次。</p><p><img src="/pic/2024-3-12-ql14.png"></p><p>创建完成后，可以点击任务后边的“运行”手动执行。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近发现smzdm张大妈断签了，检查后发现之前部署的签到服务很久没更新，大概作者放弃了。咱转战青龙面板吧，拖羊毛档的福，热度一直比较高，相关脚本更新也很快。&lt;/p&gt;
&lt;p&gt;目前使用的是一台黑群晖，版本7.1。准备使用docker方式部署。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="群晖" scheme="https://bg4vrg.com/tags/%E7%BE%A4%E6%99%96/"/>
    
    <category term="青龙" scheme="https://bg4vrg.com/tags/%E9%9D%92%E9%BE%99/"/>
    
    <category term="docker" scheme="https://bg4vrg.com/tags/docker/"/>
    
    <category term="签到" scheme="https://bg4vrg.com/tags/%E7%AD%BE%E5%88%B0/"/>
    
  </entry>
  
</feed>
