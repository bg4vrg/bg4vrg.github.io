<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BG4VRG的无线电之旅</title>
  
  <subtitle>探索业余无线电的奥秘，分享linux和网络的知识</subtitle>
  <link href="https://bg4vrg.com/atom.xml" rel="self"/>
  
  <link href="https://bg4vrg.com/"/>
  <updated>2025-03-04T07:26:52.472Z</updated>
  <id>https://bg4vrg.com/</id>
  
  <author>
    <name>fei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>wekan电子看板搭建</title>
    <link href="https://bg4vrg.com/post/20250304132200.html"/>
    <id>https://bg4vrg.com/post/20250304132200.html</id>
    <published>2025-03-04T05:22:00.000Z</published>
    <updated>2025-03-04T07:26:52.472Z</updated>
    
    <content type="html"><![CDATA[<p>wekan电子看板搭建需要先创建数据库容器，然后再将wekan容器链接到mongo容器上。如果要保持电子看板数据，还需要映射容器的&#x2F;data目录。</p><span id="more"></span><p>创建mongo数据库容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name wekan-db -v /volume3/docker/wekan/db:/data/db mongo:6.0.20</span><br></pre></td></tr></table></figure><p>创建wekan容器，目前最新版容器有空白首页bug，需要指定版本为7.81.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always --name wekan --link &quot;wekan-db:db&quot; -e &quot;WITH_API=true&quot; -e &quot;MONGO_URL=mongodb://db&quot; -e &quot;ROOT_URL=http://10.139.27.3:2025&quot; -p 2025:8080 -v /volume3/docker/wekan/data:/data wekanteam/wekan:v7.81</span><br></pre></td></tr></table></figure><p>参数意思是链接上面mongo容器并映射wekan主页端口地址为2025（默认8080）</p><p>wekan的数据存储映射到宿主机，注意默认情况下回因为&#x2F;data映射到宿主机的挂载文件夹权限问题导致容器不断重启，需要做如下操作：即在宿主机上对映射目录修改权限。实际操作宿主机地址目录地址为&#x2F;volume3&#x2F;docker&#x2F;wekan&#x2F;data</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 999:999 /path/to/data/on/host</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>chown</code></strong>: 修改文件&#x2F;目录的所有权。</p></li><li><p><strong><code>-R</code></strong>: 递归操作（修改目录及其子目录&#x2F;文件的所有权）。</p></li><li><p><strong><code>999:999</code></strong>: 将所有权设置为用户 ID (UID) <code>999</code> 和组 ID (GID) <code>999</code>。</p></li><li><p><strong><code>/path/to/data/on/host</code></strong>: 宿主机上的某个目录路径。</p></li><li><p><strong>容器内的用户身份</strong><br>许多 Docker 容器（尤其是官方镜像，如 PostgreSQL、Redis 等）默认以非 root 用户运行进程，例如使用 UID&#x2F;GID <code>999</code> 或 <code>1000</code>。这是出于安全考虑，避免容器进程以 root 权限运行。</p></li><li><p><strong>挂载目录的权限问题</strong><br>如果通过 <code>bind mount</code> 或 <code>volume</code> 将宿主机目录挂载到容器中，容器内的进程需要对该目录有读写权限。但<strong>宿主机和容器共享相同的 UID&#x2F;GID 数字标识</strong>（即使用户名不同），因此：</p><ul><li>如果宿主机目录的 UID&#x2F;GID 与容器内进程的 UID&#x2F;GID <strong>不匹配</strong>，容器会因权限不足而报错。</li><li>通过 <code>chown 999:999</code> 强制将宿主机目录的权限匹配容器内的用户身份，即可解决权限问题。</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;wekan电子看板搭建需要先创建数据库容器，然后再将wekan容器链接到mongo容器上。如果要保持电子看板数据，还需要映射容器的&amp;#x2F;data目录。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="docker" scheme="https://bg4vrg.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ssh下群晖docker套件重启</title>
    <link href="https://bg4vrg.com/post/20250224171109.html"/>
    <id>https://bg4vrg.com/post/20250224171109.html</id>
    <published>2025-02-24T09:11:09.000Z</published>
    <updated>2025-03-04T07:29:18.942Z</updated>
    
    <content type="html"><![CDATA[<p>先查询docker服务名称</p><p><code>systemctl list-units --type=service | grep docker</code><br>  pkg-Docker-dockerd.service                   loaded active running Docker Application Container Engine</p><p>重启</p><p><code>systemctl restart pkg-Docker-dockerd.service</code></p><span id="more"></span><p><img src="/../pic/image-20250224171155608.png" alt="image-20250224171155608"></p><p><img src="/../pic/image-20250224171227201.png" alt="image-20250224171227201"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先查询docker服务名称&lt;/p&gt;
&lt;p&gt;&lt;code&gt;systemctl list-units --type=service | grep docker&lt;/code&gt;&lt;br&gt;  pkg-Docker-dockerd.service                   loaded active running Docker Application Container Engine&lt;/p&gt;
&lt;p&gt;重启&lt;/p&gt;
&lt;p&gt;&lt;code&gt;systemctl restart pkg-Docker-dockerd.service&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>pve集群单硬盘剩余空间创建OSD</title>
    <link href="https://bg4vrg.com/post/20250219182201.html"/>
    <id>https://bg4vrg.com/post/20250219182201.html</id>
    <published>2025-02-19T10:22:01.000Z</published>
    <updated>2025-03-04T07:39:24.567Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录3台双网卡主机搭建pve集群（ceph）中操作要点，实验性质，所以不是很严谨仅供参考。</p><h2 id="lsbk命令"><a href="#lsbk命令" class="headerlink" title="lsbk命令"></a>lsbk命令</h2><p>用于查询pve主机的硬盘及分区情况</p><p><img src="/../pic/image-20250219182800298.png" alt="lsbk命令"></p><h2 id="fdisk-l命令"><a href="#fdisk-l命令" class="headerlink" title="fdisk -l命令"></a>fdisk -l命令</h2><p>查看并给硬盘分区</p><p><img src="/../pic/image-20250219182837182.png" alt="fdisk -l命令"></p><p>使用fdisk命令对sda硬盘分区操作</p><p><img src="/../pic/image-20250219183205602.png" alt="image-20250219183205602"></p><p>输入n开始创建，全部默认相信</p><p><img src="/../pic/image-20250219183305518.png" alt="image-20250219183305518"></p><p>使用命令p查看现在分区4是否创建成功</p><p><img src="/../pic/image-20250219183339891.png" alt="image-20250219183339891"></p><p>确认无误使用w命令保存</p><p><img src="/../pic/image-20250219183403084.png" alt="image-20250219183403084"></p><p>不放心的可以使用partprobe让内核及时识别最新的分区布局，而无需重启系统。</p><h2 id="创建OSD"><a href="#创建OSD" class="headerlink" title="创建OSD"></a>创建OSD</h2><p>此时在pve2管理页面创建osd那里就可以看到刚才创建的sda4了，因为没有挂载目录，不需要写启动项。因为只有1块物理盘，所以db磁盘和wal磁盘也没法选择，全部默认下一步就行了。</p><p><img src="/../pic/image-20250219183452221.png" alt="image-20250219183452221"></p><p><img src="/../pic/image-20250219183815137.png" alt="image-20250219183815137"></p><p><img src="/../pic/image-20250219184039418.png" alt="image-20250219184039418"></p><h3 id="创建资源池pool"><a href="#创建资源池pool" class="headerlink" title="创建资源池pool"></a>创建资源池pool</h3><p><img src="/../pic/image-20250219201710043.png" alt="image-20250219201710043"></p><h3 id="创建RBD"><a href="#创建RBD" class="headerlink" title="创建RBD"></a>创建RBD</h3><p>用于存储虚拟机，默认即可</p><p>在 PVE（Proxmox VE）中部署 Ceph 时，通常使用 BlueStore 作为 OSD（对象存储守护进程）的存储后端，而 BlueStore 会利用额外的磁盘分区来提升性能，这就是 WAL 磁盘和 DB 磁盘的作用：</p><ul><li><pre><code>- **WAL 磁盘**：用于存储写前日志（Write-Ahead Log）。在写入数据时，数据首先被写入 WAL，这样可以快速记录数据修改的操作，确保在出现故障时能够进行数据恢复。将 WAL 放在一个高速（通常是 SSD 或 NVMe）设备上，可以降低写入延迟并提高数据安全性。- **DB 磁盘**：用于存储 BlueStore 的元数据数据库（例如 RocksDB）。这个数据库记录了 OSD 内部的元数据信息，如索引、对象布局等。把 DB 放在专用的快速存储设备上，可以加速元数据的读写操作，进一步提高整个 Ceph 存储系统的性能。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure>RBD 是 Ceph 中的块存储设备，全称为 **RADOS Block Device**。其核心概念和作用如下：</code></pre></li><li><p><strong>块存储接口</strong>：RBD 把 Ceph 底层的对象存储（RADOS）抽象成块设备，类似于传统的硬盘或 SSD。这样，用户可以像使用常规磁盘那样对其进行格式化、挂载和读写操作。</p></li><li><p><strong>数据分布和高可用性</strong>：由于 RBD 数据实际上存储在 Ceph 集群中的多个 OSD 上，所以具备良好的数据冗余和容错能力。一旦某个节点故障，数据依然可以从其他节点获取，确保高可用性。</p></li><li><p><strong>快照和克隆功能</strong>：RBD 支持快速快照和克隆，这对于备份、恢复以及测试环境的快速部署都非常有用。</p></li><li><p><strong>应用场景</strong>：RBD 常用于虚拟化平台（例如 KVM、QEMU）作为虚拟机磁盘存储，也适用于数据库、容器存储等需要块级存储访问的场景。</p></li></ul><p>简单来说，RBD 将 Ceph 的分布式、可扩展、高可靠性的存储能力以块设备的形式呈现出来，使得用户能够方便地利用这些优势构建灵活高效的存储解决方案。</p><pre><code>做个说明就是关于DB磁盘和WAL磁盘的容量大小设定问题： Ceph的wal和db的容量到底应该多大，网上说法不一。默认情况下， wal 和 db 的大小分别是 512 MB 和 1GB, 但是也有人提到2T的数据db应该20G的。 DB磁盘：ceph官方建议是hdd的4%，但ceph社区里的普遍意见是30GB以及300GB，而大多数选择30GB。如果资金充裕当然是尽量300GB或者按照官方推荐的4%，个人建议条件允许的话最好设定40G以上，越大肯定效果越好。 WAL磁盘：ceph社区大多数人设定的2GB![image-20250219202103363](../pic/image-20250219202103363.png)![image-20250219202939790](../pic/image-20250219202939790.png)![image-20250219202954304](../pic/image-20250219202954304.png)### pve的高可用#### 先创建主机组，然后并配置主机优先级（也可默认自动）指定优先级后，虚拟机会在优先级高的节点上先后自动迁移到优先级高的节点上。![image-20250219205910038](../pic/image-20250219205910038.png)## cephfs![image-20250221181300803](../pic/image-20250221181300803.png)![image-20250221181834161](../pic/image-20250221181834161.png)如果没有cephfs，那么在任一pve主机上创建虚拟机时，只能看到本地local磁盘下上传的iso文件。假设pve2 local硬盘里有iso，只能pve2节点才能使用，pve1节点是无法使用的，即使是同一集群内。![image-20250221182000424](../pic/image-20250221182000424.png)## cephfs步骤#### 首先在任意节点创建元数据服务器如下图，这是必须的前提![image-20250221182304479](../pic/image-20250221182304479.png)![image-20250221182351261](../pic/image-20250221182351261.png)#### 然后创建cephfs![image-20250221182437618](../pic/image-20250221182437618.png)![image-20250221182518219](../pic/image-20250221182518219.png)![image-20250221182541433](../pic/image-20250221182541433.png)#### 然后“数据中心-存储”中可以看到cephfs了![image-20250221182642817](../pic/image-20250221182642817.png)#### 这时候可以从左侧任意节点的cephfs上传文件了![image-20250221182833963](../pic/image-20250221182833963.png)![image-20250221183148858](../pic/image-20250221183148858.png)可以看到，通过pve1节点上传的iso，在pve2的节点下依然能看到。#### 再通过pve3节点创建虚拟机试试![image-20250221183347736](../pic/image-20250221183347736.png)没问题，依然能找到文件![image-20250221183408684](../pic/image-20250221183408684.png)注意存储选项里选rbd文件系统保存虚拟机![image-20250221183640933](../pic/image-20250221183640933.png)创建后发现无法启动虚拟机![image-20250221203839260](../pic/image-20250221203839260.png)看来是宿主机的p8600 cpu太老了，直接选择内核为kvm64或者host即可![image-20250221203735502](../pic/image-20250221203735502.png)![image-20250221203859982](../pic/image-20250221203859982.png)注意ikuai这里只有1块网卡的话，如果不用单臂路由就只能用旁路由模式只配lan地址为你的局域网地址了。到ikuai后台要添加一条静态路由，目标地址和子网掩码都为0.0.0.0 下一跳地址写你局域网能上网的网关地址。迁移到pve2成功![image-20250221210240382](../pic/image-20250221210240382.png)ikuai的插件功能需要注册帐号绑定二维码，不太厚道，我选择创建一个istoreos玩玩，教程在这里https://doc.linkease.com/zh/guide/istoreos/install_pve.html需要注意的是pve安装方法除了iso外，还可以先创建一个没有硬盘的虚拟机，再使用img2kvm工具直接在pve宿主机上添加硬盘。注意这个工具默认安装在local-lvm存储，不然会报错。![image-20250221213058577](../pic/image-20250221213058577.png)可以在命令img2kvm istoreos××××img.gz后指定存储为local或cephfs![image-20250221213317538](../pic/image-20250221213317538.png)导入到cephfs不行，不支持img，改到rbd存储成功![image-20250221213859059](../pic/image-20250221213859059.png)![image-20250221213941326](../pic/image-20250221213941326.png)![image-20250221214004600](../pic/image-20250221214004600.png)注意要双击“未使用的磁盘0”来启用该硬盘，并在左侧选项中修改引导顺序。</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文主要记录3台双网卡主机搭建pve集群（ceph）中操作要点，实验性质，所以不是很严谨仅供参考。&lt;/p&gt;
&lt;h2 id=&quot;lsbk命令&quot;&gt;&lt;a href=&quot;#lsbk命令&quot; class=&quot;headerlink&quot; title=&quot;lsbk命令&quot;&gt;&lt;/a&gt;lsbk命令&lt;/h2&gt;</summary>
      
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="pve" scheme="https://bg4vrg.com/tags/pve/"/>
    
    <category term="集群" scheme="https://bg4vrg.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>相机扫描二维码连接隐藏wifi</title>
    <link href="https://bg4vrg.com/post/20240813095513.html"/>
    <id>https://bg4vrg.com/post/20240813095513.html</id>
    <published>2024-08-13T01:55:13.000Z</published>
    <updated>2024-08-13T02:10:38.607Z</updated>
    
    <content type="html"><![CDATA[<p>现在对wifi无线局域网的安全要求越来越严格，近期不少地方要求对wifi的ssid进行隐藏并设置复杂密码，这样导致连接隐藏wifi时会比较复杂。</p><p>比较简单的办法是先生成一个包含wifi ssid和密码（均明文）的二维码，然后使用原生相机扫码，手机会自动提示点击加入wifi，不需要其他输入ssid和密码的复杂操作。</p><p>但要注意：</p><p>1、部分老安卓手机可能不支持，这时可以使用支付宝扫码功能连接。</p><p>2、微信扫码是不支持直连wifi的，毕竟人家是要靠这个收费的。</p><span id="more"></span><p>生成二维码的源码在这里：<a href="https://github.com/bndw/wifi-card">https://github.com/bndw/wifi-card</a></p><p>一般不需要重新搭建，可以直接使用官方网站生成二维码</p><p><a href="https://wificard.io/">https://wificard.io/</a></p><p>可以选择将密码选择隐藏或显示出来</p><p><img src="/../pic/image-20240813100257642.png" alt="image-20240813100257642"></p><p>苹果手机扫码效果如下：直接点击黄色ssid即可</p><p><img src="/../pic/image-20240813100514611.png" alt="image-20240813100514611"></p><p>或者使用支付宝扫码如下图</p><p><img src="/../pic/580471e3438b727a73d50d19f050b7a.jpg" alt="580471e3438b727a73d50d19f050b7a"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在对wifi无线局域网的安全要求越来越严格，近期不少地方要求对wifi的ssid进行隐藏并设置复杂密码，这样导致连接隐藏wifi时会比较复杂。&lt;/p&gt;
&lt;p&gt;比较简单的办法是先生成一个包含wifi ssid和密码（均明文）的二维码，然后使用原生相机扫码，手机会自动提示点击加入wifi，不需要其他输入ssid和密码的复杂操作。&lt;/p&gt;
&lt;p&gt;但要注意：&lt;/p&gt;
&lt;p&gt;1、部分老安卓手机可能不支持，这时可以使用支付宝扫码功能连接。&lt;/p&gt;
&lt;p&gt;2、微信扫码是不支持直连wifi的，毕竟人家是要靠这个收费的。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="wifi" scheme="https://bg4vrg.com/tags/wifi/"/>
    
    <category term="支付宝" scheme="https://bg4vrg.com/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
    <category term="相机" scheme="https://bg4vrg.com/tags/%E7%9B%B8%E6%9C%BA/"/>
    
    <category term="二维码" scheme="https://bg4vrg.com/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>esxi下ros虚拟机更换网卡后无法联网</title>
    <link href="https://bg4vrg.com/post/20240813082145.html"/>
    <id>https://bg4vrg.com/post/20240813082145.html</id>
    <published>2024-08-13T00:21:45.000Z</published>
    <updated>2024-08-13T00:35:03.605Z</updated>
    
    <content type="html"><![CDATA[<p>前几天因为互联网esxi集群vcsa虚拟机证书过期，导致无法登陆。一番折腾后放弃，直接删除原vcenter后重装，结果发现原来创建的分布式交换机在新的vcenter中无法加载。将普通虚拟机更换为标准交换机的端口组后，ros虚拟机掉线了。。。。</p><span id="more"></span><p>经过排查，发现是ros不能像windows、linux虚拟机那样自动更新网卡mac地址。使用以下命令在ros命令行中重置网卡即可，ip地址不会丢失。</p><p><code>interface ethernet print</code></p><p>显示物理网卡编号、名称、状态、mac，R代表ready已启用,#一列代表网卡编号，从</p><p><img src="/../pic/image-20240813082815372.png" alt="image-20240813082815372"></p><p><code>interface ethernet reset-mac-address numbers=0</code></p><p>重置编号为0的网卡mac地址</p><p><code>ip address print</code></p><p><img src="/../pic/image-20240813083141077.png" alt="image-20240813083141077"></p><p><code>ip route print</code> </p><p>显示路由表</p><p><img src="/../pic/image-20240813083218558.png" alt="image-20240813083218558"></p><p>配置网卡IP</p><p><code>ip address add address=192.168.0.11/24 interface=ether1</code></p><p>配置默认路由</p><p><code>ip route add gateway=192.168.0.1</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前几天因为互联网esxi集群vcsa虚拟机证书过期，导致无法登陆。一番折腾后放弃，直接删除原vcenter后重装，结果发现原来创建的分布式交换机在新的vcenter中无法加载。将普通虚拟机更换为标准交换机的端口组后，ros虚拟机掉线了。。。。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>群晖docker配置代理地址/更换源</title>
    <link href="https://bg4vrg.com/post/20240614160329.html"/>
    <id>https://bg4vrg.com/post/20240614160329.html</id>
    <published>2024-06-14T08:03:29.000Z</published>
    <updated>2025-03-04T07:28:00.657Z</updated>
    
    <content type="html"><![CDATA[<p>dockerhub挂了，一直以为电信精品网可以豁免，没想到想多了。赶紧指定下代理地址来拉下镜像。</p><p><strong>2025-2-24更新</strong></p><h3 id="1、临时使用镜像源"><a href="#1、临时使用镜像源" class="headerlink" title="1、临时使用镜像源"></a>1、临时使用镜像源</h3><p><code>docker pull docker.1ms.run/nginx:latest</code></p><h3 id="2、永久使用"><a href="#2、永久使用" class="headerlink" title="2、永久使用"></a>2、永久使用</h3><p>注意群晖7的镜像地址不是&#x2F;etc&#x2F;docker&#x2F;daemon.js</p><span id="more"></span><p>文件编辑路径为</p><p><code>/var/packages/Docker/etc/dockerd.json</code></p><p>修改镜像地址</p><p><code>&quot;registry-mirrors&quot; : [https://docker.1ms.run],</code></p><p><img src="/../pic/image-20250224172635741.png" alt="image-20250224172635741"></p><p>重启docker服务或者重启服务器</p><p><code>systemctl restart pkg-Docker-dockerd.service</code></p><p>使用<code>docker info</code>验证，发现生效了，同时拉取正常</p><p><img src="/../pic/image-20250224174925862.png" alt="image-20250224174925862"></p><h3 id="3、添加代理办法"><a href="#3、添加代理办法" class="headerlink" title="3、添加代理办法"></a>3、添加代理办法</h3><p>进入ssh</p><p><code>vim  /usr/local/lib/systemd/system/pkg-Docker-dockerd.service</code></p><p>添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Environment=&quot;HTTP_PROXY=http://10.139.27.5:10811&quot;</span><br><span class="line">Environment=&quot;HTTPS_PROXY=http://10.139.27.5:10811&quot;</span><br><span class="line">Environment=&quot;NO_PROXY=localhost,127.0.0.0/8,10.139.0.0/16&quot;</span><br></pre></td></tr></table></figure><p>1、2行为自己搭建的代理地址及端口，3行为排除本地局域网地址。</p><p>最重要的是要重启下docker服务，然后docker info确认下</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;dockerhub挂了，一直以为电信精品网可以豁免，没想到想多了。赶紧指定下代理地址来拉下镜像。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2025-2-24更新&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、临时使用镜像源&quot;&gt;&lt;a href=&quot;#1、临时使用镜像源&quot; class=&quot;headerlink&quot; title=&quot;1、临时使用镜像源&quot;&gt;&lt;/a&gt;1、临时使用镜像源&lt;/h3&gt;&lt;p&gt;&lt;code&gt;docker pull docker.1ms.run/nginx:latest&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;2、永久使用&quot;&gt;&lt;a href=&quot;#2、永久使用&quot; class=&quot;headerlink&quot; title=&quot;2、永久使用&quot;&gt;&lt;/a&gt;2、永久使用&lt;/h3&gt;&lt;p&gt;注意群晖7的镜像地址不是&amp;#x2F;etc&amp;#x2F;docker&amp;#x2F;daemon.js&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="docker" scheme="https://bg4vrg.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>迁移transmission数据到新建服务器</title>
    <link href="https://bg4vrg.com/post/20240604174705.html"/>
    <id>https://bg4vrg.com/post/20240604174705.html</id>
    <published>2024-06-04T09:47:05.000Z</published>
    <updated>2024-06-04T15:38:01.994Z</updated>
    
    <content type="html"><![CDATA[<p>记录下将pt数据（含文件资源及种子和软件配置）从老服务器迁移到新建的24盘存储设备过程。</p><p>相关配置如下表：</p><table><thead><tr><th></th><th>老服务器</th><th>新存储</th></tr></thead><tbody><tr><td>设备型号</td><td>华为rh2288</td><td>大华7系云存储</td></tr><tr><td>硬盘盘位</td><td>12</td><td>24</td></tr><tr><td>操作系统</td><td>unraid 6.11.1</td><td>unraid 6.12.10</td></tr><tr><td>阵列模式</td><td>1块校验盘+10块组阵列</td><td>无校验盘，23块盘组zfs，系统软件数据放在单独一块512G ssd</td></tr><tr><td>可用容量</td><td>36TB</td><td>73TB</td></tr></tbody></table><span id="more"></span><h1 id="一、文件资源转移"><a href="#一、文件资源转移" class="headerlink" title="一、文件资源转移"></a>一、文件资源转移</h1><p>通过rsync将21TB数据迁移到新服务器上，具体操作见上篇文章。</p><p>因为老服务器级联交换机是千兆上联到核心上，所以最多也就跑满千兆，最后花了三天时间才传完。</p><h1 id="二、PT软件配置备份"><a href="#二、PT软件配置备份" class="headerlink" title="二、PT软件配置备份"></a>二、PT软件配置备份</h1><h2 id="2-1-安装官方4-05版transmission"><a href="#2-1-安装官方4-05版transmission" class="headerlink" title="2.1 安装官方4.05版transmission"></a>2.1 安装官方4.05版transmission</h2><p>之前使用transmission 3的快速校验版，一直传闻会有封禁风险，不过从没听过谁被ban了。这次升级，干脆就直接使用官方4.0.5版，因为4.0之后官方就支持快速校验了。</p><p>下图是2个版本的transmission容器对比，上面的是新版4.0.5.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/config /mnt/user/appdata/transmission/</span><br><span class="line">/downloads /mnt/user/ptshare/pt157/</span><br><span class="line">/watch /mnt/user/ptshare/pt157/watch</span><br></pre></td></tr></table></figure><p><img src="/../pic/2024-6-4-transmission-1.png"></p><p>为了防止容器占用太多的内存，可以在容器-高级设置-额外参数中添加“–memory&#x3D;4g”限制仅使用4G内存。</p><p><img src="/../pic/2024-6-4-transmission-2.png" alt="内存限制"></p><h2 id="2-2-迁移种子文件"><a href="#2-2-迁移种子文件" class="headerlink" title="2.2 迁移种子文件"></a>2.2 迁移种子文件</h2><p>新设备容器跑起来后会发现，虽然下载文件夹和配置文件夹都指向了迁移后的pt资源文件夹，但是pt软件中的种子一个不见。</p><p>这是因为在创建新版本transmission时，unraid默认指定了用户id 99和组id 100，而复制过来的文件不同组（root:root）。</p><p><img src="/../pic/2024-6-4-transmission-3.png" alt="image-20240604191730007"></p><p>使用以下命令修改文件属性。</p><ol><li><p><strong>查找用户和组</strong>： 首先，你需要确认UID为99和GID为100的用户和组的名称。使用<code>id -un 99</code>和<code>getent group 100 | cut -d: -f1</code>命令来获取这些信息。</p></li><li><p><strong>使用<code>chown</code>命令</strong>： 从第一步可以看到UID为99的用户名为<code>nobody</code>，GID为100的组名为<code>users</code>，并且你想改变文件<code>myfile.txt</code>的所有者和所属组，你可以使用以下命令：</p><p>Bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown nobody:users myfile.txt</span><br></pre></td></tr></table></figure></li></ol><p>具体操作见下图</p><p><img src="/../pic/2024-6-4-transmission-4.png"></p><p>或者：启用特权模式</p><h2 id="2-3-重启容器"><a href="#2-3-重启容器" class="headerlink" title="2.3 重启容器"></a>2.3 重启容器</h2><p>可以发现，几千个种子回来了～</p><p><img src="/../pic/2024-6-4-transmission-5.png" alt="image-20240604192651553"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录下将pt数据（含文件资源及种子和软件配置）从老服务器迁移到新建的24盘存储设备过程。&lt;/p&gt;
&lt;p&gt;相关配置如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;老服务器&lt;/th&gt;
&lt;th&gt;新存储&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;设备型号&lt;/td&gt;
&lt;td&gt;华为rh2288&lt;/td&gt;
&lt;td&gt;大华7系云存储&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;硬盘盘位&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;操作系统&lt;/td&gt;
&lt;td&gt;unraid 6.11.1&lt;/td&gt;
&lt;td&gt;unraid 6.12.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阵列模式&lt;/td&gt;
&lt;td&gt;1块校验盘+10块组阵列&lt;/td&gt;
&lt;td&gt;无校验盘，23块盘组zfs，系统软件数据放在单独一块512G ssd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用容量&lt;/td&gt;
&lt;td&gt;36TB&lt;/td&gt;
&lt;td&gt;73TB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="docker" scheme="https://bg4vrg.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>rsync免密码传输</title>
    <link href="https://bg4vrg.com/post/20240602160403.html"/>
    <id>https://bg4vrg.com/post/20240602160403.html</id>
    <published>2024-06-02T08:04:03.000Z</published>
    <updated>2024-06-02T13:53:16.243Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍使用rsync将pt文件夹从一台unraid（远程主机，ip192.168.22.157）迁移到另一台unraid（本地）。因数据量有20多TB，无法一次命令完成。在执行一段时间约2TB左右后程序会崩溃，所以需要一段脚本能自动检测进程是否在执行，如果没有发现rsync就自动执行一次。</p><p>该脚本的前提是在本地可以免密码登录远程主机。</p><span id="more"></span><h1 id="一、rsync备份命令详解"><a href="#一、rsync备份命令详解" class="headerlink" title="一、rsync备份命令详解"></a>一、rsync备份命令详解</h1><p>假设希望将另一台主机（IP：192.168.22.157）备份到本地 <code>/mydir/backup/</code> 目录下，可以使用的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avP root@192.168.22.157:/repos/src/ /mydir/backup/</span><br></pre></td></tr></table></figure><p>深度定制命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --timeout=600 --retry=3 -e &quot;ssh -p 2333&quot; root@192.168.22.157:/mnt/user/huaweipt/ /mnt/user/ptshare/pt157/</span><br></pre></td></tr></table></figure><p>-a 表示归档模式，它保留原有的文件属性（如时间戳、权限等）并递归复制目录。<br>-v 表示详细模式，会在执行过程中输出详细的传输信息。<br>-z 表示启用压缩，可以在传输过程中减少带宽使用。<br>-e ssh 指定使用SSH作为传输的外壳程序，这对于网络间的文件传输非常重要，因为它提供了加密的安全通道。<br>-p 2333表示ssh端口为2333</p><p>-P 表示输出时显示更多内容如当前传送文件名称、速度、进度</p><p>–timeout和–retry选项增加超时时间和重试次数，但是–retry老版本不支持。</p><p>–delete 在源服务器上的文件删除后，在目标服务器同步删除</p><p>默认每次同步备份文件的时候，是需要输入 root 密码的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]</span><br><span class="line">Push: rsync [OPTION...] SRC... [USER@]HOST:DEST</span><br></pre></td></tr></table></figure><p><code>注意</code>：rsync命令使用中，关于末尾斜线（<code>/</code>）的说明：</p><ul><li>如果源参数的末尾有斜线，就会复制指定目录下的内容，而不复制目录本身；</li><li>如果源参数的末尾没有斜线，则会复制目录本身；</li><li>目标参数末尾的斜线没有作用；</li></ul><h1 id="二、免密设置"><a href="#二、免密设置" class="headerlink" title="二、免密设置"></a>二、免密设置</h1><h2 id="2-1、生成密钥"><a href="#2-1、生成密钥" class="headerlink" title="2.1、生成密钥"></a>2.1、生成密钥</h2><p>在本地主机上生成密钥文件，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>输入这个命令后，一路回车即可。此时会在 <code>~/.ssh/</code> 下生成 <code>id_rsa.pub</code> 文件。</p><p><img src="/../pic/2024-6-2-rsync-1.png"></p><h2 id="2-2、拷贝公钥到远端服务器"><a href="#2-2、拷贝公钥到远端服务器" class="headerlink" title="2.2、拷贝公钥到远端服务器"></a>2.2、拷贝公钥到远端服务器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i /root/.ssh/id_rsa.pub -p 2333 root@192.168.22.157</span><br></pre></td></tr></table></figure><p>-p 2333是指定ssh端口</p><h2 id="2-3、再次同步"><a href="#2-3、再次同步" class="headerlink" title="2.3、再次同步"></a>2.3、再次同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --<span class="built_in">timeout</span>=600 --retry=3 -e <span class="string">&quot;ssh -p 2333&quot;</span> root@10.139.22.157:/mnt/user/huaweipt/ /mnt/user/ptshare/pt157/</span><br></pre></td></tr></table></figure><p>此时就无需再输入密码了。  </p><p>ps： –retry&#x3D;3这个参数在unraid中不支持，版本问题，会导致脚本报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">pnum=$(ps -ef | grep rsync| grep -v grep|wc -l)</span><br><span class="line">if [ $pnum -eq 0 ]</span><br><span class="line">then</span><br><span class="line">       rsync -avz --timeout=600 -e &quot;ssh -p 2333&quot; root@10.139.22.157:/mnt/user/huaweipt/ /mnt/user/ptshare/pt157/</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="三、添加计划任务"><a href="#三、添加计划任务" class="headerlink" title="三、添加计划任务"></a>三、添加计划任务</h1><p>10分钟执行一次脚本检查rsync进程是否存在，不存在重启任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">crobtab -e</span><br><span class="line">*/10 * * * * sh /mnt/user/appdata/src/r.sh 1&gt; /dev/null</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍使用rsync将pt文件夹从一台unraid（远程主机，ip192.168.22.157）迁移到另一台unraid（本地）。因数据量有20多TB，无法一次命令完成。在执行一段时间约2TB左右后程序会崩溃，所以需要一段脚本能自动检测进程是否在执行，如果没有发现rsync就自动执行一次。&lt;/p&gt;
&lt;p&gt;该脚本的前提是在本地可以免密码登录远程主机。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>unraid中部分硬盘无法休眠</title>
    <link href="https://bg4vrg.com/post/20240530155558.html"/>
    <id>https://bg4vrg.com/post/20240530155558.html</id>
    <published>2024-05-30T07:55:58.000Z</published>
    <updated>2024-06-04T11:30:12.115Z</updated>
    
    <content type="html"><![CDATA[<p>经检查发现部分硬盘为sas盘，unraid原生只支持sata硬盘休眠。</p><p>解决办法：安装第三方插件<strong>Spin Down SAS Drives</strong></p><p><img src="/../pic/2024-5-30-sasdrive.png" alt="image-20240604192830907"></p><p>更新：还是不习惯阵列，校验会影响写入速度，现在改用zfs池的方式了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经检查发现部分硬盘为sas盘，unraid原生只支持sata硬盘休眠。&lt;/p&gt;
&lt;p&gt;解决办法：安装第三方插件&lt;strong&gt;Spin Down SAS Drives&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../pic/2024-5-30-sasdrive.</summary>
      
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>廉价业余无线电收发套件ADX-S v2</title>
    <link href="https://bg4vrg.com/post/20240522130744.html"/>
    <id>https://bg4vrg.com/post/20240522130744.html</id>
    <published>2024-05-22T05:07:44.000Z</published>
    <updated>2024-06-04T11:44:17.779Z</updated>
    
    <content type="html"><![CDATA[<p>ADX 是 Barb, WB2CBA 的作品，Barb 也是 uSDX 的设计者之一，和 DL2MAN 同期。</p><p>ADX-S顾名思义，是一个简易的基于 Arduino 模块的纯数字收发信机，而加上 S 表示接收从原来的直接变频 DC 改成了超外差 Superhet，接收效果提升明显，加上一系列体验的完善，已经成为一个非常贴近初学者的数字收发信机套件 。</p><p>我在用的ADX-S V2套件，由BD6CR荣老师提供。覆盖40&#x2F;30&#x2F;20&#x2F;17&#x2F;15&#x2F;12&#x2F;10七波段，含所有零件和PCB板（主板，上下盖板），TCXO小板，音频线和音频转接板套件，加塑料外壳，支持FT8&#x2F;FT4&#x2F;JS8&#x2F;WSPR，可选：蓝牙模块。</p><p>组装由BG4VZC完成。</p><span id="more"></span><p>到手试玩。毕竟不能和大几千的机器比，能解决有无的问题就很满足了，毕竟几百元。</p><p><img src="/../pic/2024-05-22-adxs1.png" alt="实物"></p><p>![(..&#x2F;pic&#x2F;2024-05-22-adxs1.png)</p><p><img src="/../pic/2024-05-22-adxs2.png" alt="首通"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;ADX 是 Barb, WB2CBA 的作品，Barb 也是 uSDX 的设计者之一，和 DL2MAN 同期。&lt;/p&gt;
&lt;p&gt;ADX-S顾名思义，是一个简易的基于 Arduino 模块的纯数字收发信机，而加上 S 表示接收从原来的直接变频 DC 改成了超外差 Superhet，接收效果提升明显，加上一系列体验的完善，已经成为一个非常贴近初学者的数字收发信机套件 。	&lt;/p&gt;
&lt;p&gt;我在用的ADX-S V2套件，由BD6CR荣老师提供。覆盖40&amp;#x2F;30&amp;#x2F;20&amp;#x2F;17&amp;#x2F;15&amp;#x2F;12&amp;#x2F;10七波段，含所有零件和PCB板（主板，上下盖板），TCXO小板，音频线和音频转接板套件，加塑料外壳，支持FT8&amp;#x2F;FT4&amp;#x2F;JS8&amp;#x2F;WSPR，可选：蓝牙模块。&lt;/p&gt;
&lt;p&gt;组装由BG4VZC完成。&lt;/p&gt;</summary>
    
    
    
    <category term="业余无线电" scheme="https://bg4vrg.com/categories/AmateurRadio/"/>
    
    
    <category term="业余无线电" scheme="https://bg4vrg.com/tags/%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>CsiR大佬新作NetOpsGUI:netops2.0的图形版</title>
    <link href="https://bg4vrg.com/post/20240421204758.html"/>
    <id>https://bg4vrg.com/post/20240421204758.html</id>
    <published>2024-04-21T12:47:58.000Z</published>
    <updated>2024-06-04T11:44:26.569Z</updated>
    
    <content type="html"><![CDATA[<p>偷懒专用。</p><p>以下介绍摘自项目github：<a href="https://github.com/kiraster/NetOpsGUI">https://github.com/kiraster/NetOpsGUI</a></p><p>一个使用nornir框架编写的跑交换机脚本工具的图形界面版本，参考上一代程序<a href="https://github.com/kiraster/netops_v2.0_beta">netops_v2.0_beta</a></p><p>UI界面使用了 <a href="https://github.com/zhiyiYo/PyQt-Fluent-Widgets">PyQt-Fluent-Widgets</a>，后台使用了<a href="https://github.com/nornir-automation/nornir">nornir</a> 和其周边。</p><blockquote><p>目前只写了一个接口的六分之一的三分之一，用处不大全是BUG，称为alpha版</p><p>原来的版本是命令菜单式，功能多了不好操作，较抽象</p><p>虽然这个界面也是一个图形界面主线程干进去，但是很多操作比较直观</p></blockquote><p>界面如下：</p><p><img src="/../pic/2024-4-21-netopsgui-1.png"></p><span id="more"></span><h1 id="一、创建虚拟环境"><a href="#一、创建虚拟环境" class="headerlink" title="一、创建虚拟环境"></a>一、创建虚拟环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n netopsgui python=3.8 -y</span><br></pre></td></tr></table></figure><p><img src="/../pic/2024-4-21-netopsgui-2.png"></p><h1 id="二、下载项目程序到本地"><a href="#二、下载项目程序到本地" class="headerlink" title="二、下载项目程序到本地"></a>二、下载项目程序到本地</h1><p>有git的可以直接git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/kiraster/NetOpsGUI.git</span><br></pre></td></tr></table></figure><p>我是windows环境，直接下载比较合适</p><p>下载地址：<a href="https://github.com/kiraster/NetOpsGUI/archive/refs/heads/main.zip">https://github.com/kiraster/NetOpsGUI/archive/refs/heads/main.zip</a></p><h1 id="三、在虚拟环境中安装依赖组件"><a href="#三、在虚拟环境中安装依赖组件" class="headerlink" title="三、在虚拟环境中安装依赖组件"></a>三、在虚拟环境中安装依赖组件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line">conda activate netopsgui</span><br><span class="line"><span class="comment"># 安装库</span></span><br><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h1 id="四、运行程序"><a href="#四、运行程序" class="headerlink" title="四、运行程序"></a>四、运行程序</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py</span><br></pre></td></tr></table></figure><h1 id="五、报错"><a href="#五、报错" class="headerlink" title="五、报错"></a>五、报错</h1><h2 id="5-1-按照github-的readme先干掉报错"><a href="#5-1-按照github-的readme先干掉报错" class="headerlink" title="5.1 按照github 的readme先干掉报错"></a>5.1 按照github 的readme先干掉报错</h2><h2 id="5-2-运行后几秒钟后崩溃"><a href="#5-2-运行后几秒钟后崩溃" class="headerlink" title="5.2 运行后几秒钟后崩溃"></a>5.2 运行后几秒钟后崩溃</h2><p><img src="/../pic/image-20240421212354188.png" alt="5.2报错"></p><p>2024-5-22：后来测试几次都没成功，暂时搁置。目前主要折腾ipaview。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;偷懒专用。&lt;/p&gt;
&lt;p&gt;以下介绍摘自项目github：&lt;a href=&quot;https://github.com/kiraster/NetOpsGUI&quot;&gt;https://github.com/kiraster/NetOpsGUI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个使用nornir框架编写的跑交换机脚本工具的图形界面版本，参考上一代程序&lt;a href=&quot;https://github.com/kiraster/netops_v2.0_beta&quot;&gt;netops_v2.0_beta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UI界面使用了 &lt;a href=&quot;https://github.com/zhiyiYo/PyQt-Fluent-Widgets&quot;&gt;PyQt-Fluent-Widgets&lt;/a&gt;，后台使用了&lt;a href=&quot;https://github.com/nornir-automation/nornir&quot;&gt;nornir&lt;/a&gt; 和其周边。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前只写了一个接口的六分之一的三分之一，用处不大全是BUG，称为alpha版&lt;/p&gt;
&lt;p&gt;原来的版本是命令菜单式，功能多了不好操作，较抽象&lt;/p&gt;
&lt;p&gt;虽然这个界面也是一个图形界面主线程干进去，但是很多操作比较直观&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;界面如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../pic/2024-4-21-netopsgui-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="玩客云" scheme="https://bg4vrg.com/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>基于vue+django开发的网络设备轻量化管理平台NetOpsCenter</title>
    <link href="https://bg4vrg.com/post/20240418192744.html"/>
    <id>https://bg4vrg.com/post/20240418192744.html</id>
    <published>2024-04-18T11:27:44.000Z</published>
    <updated>2024-05-22T05:01:09.236Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/XiuziSeven/NetOpsCenter">https://github.com/XiuziSeven/NetOpsCenter</a></p><p>作者写的介绍：<a href="https://zhuanlan.zhihu.com/p/655040014">https://zhuanlan.zhihu.com/p/655040014</a></p><p>因为代码中backuponfig.py中相关备份路径默认是linux下路径方式，且使用了windows下没有的mkdir命令，所以导致windows中备份配置时会显示失败。</p><p>这也是为什么有了这篇文章的原因。</p><p><img src="/../pic/2024-4-18-netopscenter-1.png"></p><span id="more"></span><p>python环境搭建见上一篇文章。</p><p>centos7 最小化安装,所以后面会因为缺少组件导致报错。</p><h1 id="一、创建虚拟环境"><a href="#一、创建虚拟环境" class="headerlink" title="一、创建虚拟环境"></a>一、创建虚拟环境</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n netops python=3.9.5</span><br></pre></td></tr></table></figure><h1 id="二、安装依赖"><a href="#二、安装依赖" class="headerlink" title="二、安装依赖"></a>二、安装依赖</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="2-1-这一步安装报错如下："><a href="#2-1-这一步安装报错如下：" class="headerlink" title="2.1 这一步安装报错如下："></a>2.1 这一步安装报错如下：</h2><p><img src="/../pic/2024-4-18-netopscenter-2.png"></p><p>报错指出<code>mysql_config</code>和<code>mariadb_config</code>这两个命令在系统中未找到。<code>mysql_config</code>和<code>mariadb_config</code>是MySQL和MariaDB数据库的配置实用程序，用于提供编译和链接MySQL&#x2F;MariaDB客户端库时所需的编译选项和链接标志。Python包在安装时需要调用mysqlclient这些命令来获取正确的编译参数。</p><h2 id="2-2-解决方法："><a href="#2-2-解决方法：" class="headerlink" title="2.2 解决方法："></a>2.2 解决方法：</h2><p>要解决这个问题，您需要确保系统中已经安装了MySQL或MariaDB的开发库，并且<code>mysql_config</code>或<code>mariadb_config</code>命令可被找到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-devel</span><br><span class="line"><span class="comment"># ubuntu server下使用下面命令安装</span></span><br><span class="line"><span class="comment"># apt install libmysqlclient-dev</span></span><br></pre></td></tr></table></figure><h2 id="2-3-继续pip-安装依赖，还是有报错"><a href="#2-3-继续pip-安装依赖，还是有报错" class="headerlink" title="2.3 继续pip 安装依赖，还是有报错"></a>2.3 继续pip 安装依赖，还是有报错</h2><blockquote><p>error: command ‘gcc’ failed: No such file or directory<br>      [end of output]</p><p>  note: This error originates from a subprocess, and is likely not a problem with pip.<br>  ERROR: Failed building wheel for mysqlclient<br>  Running setup.py clean for mysqlclient<br>Failed to build mysqlclient<br>ERROR: Could not build wheels for mysqlclient, which is required to install pyproject.toml-based projects</p></blockquote><p>如下图，可以看出是缺少gcc之类的，yum安装即可</p><p><img src="/../pic/2024-4-18-netopscenter-3.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ make</span><br><span class="line"><span class="comment"># ubuntu server下使用下面命令安装</span></span><br><span class="line"><span class="comment"># apt install gcc</span></span><br></pre></td></tr></table></figure><h2 id="2-4-这下pip安装依赖就没问题了"><a href="#2-4-这下pip安装依赖就没问题了" class="headerlink" title="2.4 这下pip安装依赖就没问题了"></a>2.4 这下pip安装依赖就没问题了</h2><p><img src="/../pic/2024-4-18-netopscenter-4.png"></p><h1 id="四、数据库安装"><a href="#四、数据库安装" class="headerlink" title="四、数据库安装"></a>四、数据库安装</h1><p>代码应该是支持sqlite的，有兴趣的可以去代码里把mysql的注释掉，启用sqlite测试。我这里没有按照作者说明里在本地安装数据库，而是使用局域网一台群晖安装的mariaDB10套件测试。</p><p>注意之后需要在.&#x2F;netopscenter&#x2F;settings.py中修改相关数据库参数。</p><h2 id="4-1、套件安装"><a href="#4-1、套件安装" class="headerlink" title="4.1、套件安装"></a>4.1、套件安装</h2><p>略。</p><h2 id="4-2-数据库创建"><a href="#4-2-数据库创建" class="headerlink" title="4.2 数据库创建"></a>4.2 数据库创建</h2><p>ssh进入群晖，找到数据库安装路径&#x2F;volume3&#x2F;@appstore&#x2F;MariaDB10&#x2F;usr&#x2F;local&#x2F;mariadb10&#x2F;bin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /volume3/@appstore/MariaDB10/usr/local/mariadb10/bin</span><br><span class="line">./mysql -u root -p</span><br><span class="line"><span class="comment"># 以管理员身份进入数据库进行管理</span></span><br><span class="line">show databases;</span><br><span class="line"><span class="comment"># 查看已存在数据库</span></span><br><span class="line">drop database django;</span><br><span class="line"><span class="comment"># 把之前在windows下测试的django数据库删掉</span></span><br><span class="line">create database django;</span><br><span class="line"><span class="comment"># 重新创建django数据库用于服务</span></span><br><span class="line">use django;</span><br><span class="line"><span class="comment"># 选择django数据库</span></span><br><span class="line">grant all on django.* TO <span class="string">&#x27;django&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;Suyu123!@#&#x27;</span>;</span><br><span class="line"><span class="comment"># 向MySQL数据库中授予特定用户对特定数据库的全部权限，并且指定了用户的登录凭据</span></span><br><span class="line">ALTER DATABASE django DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br><span class="line"><span class="comment"># 修改数据库编码，解决中文乱码问题</span></span><br></pre></td></tr></table></figure><h1 id="五、拉取项目并修改-netopscenter-settings-py"><a href="#五、拉取项目并修改-netopscenter-settings-py" class="headerlink" title="五、拉取项目并修改.&#x2F;netopscenter&#x2F;settings.py"></a>五、拉取项目并修改.&#x2F;netopscenter&#x2F;settings.py</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/XiuziSeven/NetOpsCenter.git</span><br></pre></td></tr></table></figure><p>找到数据库配置代码，修改数据库名及连接用户名、密码、数据库地址。</p><h1 id="六、初始化数据库"><a href="#六、初始化数据库" class="headerlink" title="六、初始化数据库"></a>六、初始化数据库</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations app</span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><h2 id="6-1makemigrations-app命令报错"><a href="#6-1makemigrations-app命令报错" class="headerlink" title="6.1makemigrations app命令报错"></a>6.1makemigrations app命令报错</h2><h3 id="6-1-1-报错内容如下"><a href="#6-1-1-报错内容如下" class="headerlink" title="6.1.1 报错内容如下"></a>6.1.1 报错内容如下</h3><blockquote><p>d:\miniconda3\envs\NetOpsCenter\lib\site-packages\django\core\management\commands\makemigrations.py:121: RuntimeWarning: Got an error checking a consistent migration history performed for database connection ‘default’: (1130, “Host ‘10.139.27.5’ is not allowed to connect to this MariaDB server”)<br>  warnings.warn(<br>Migrations for ‘app’:<br>  app\migrations\0001_initial.py</p><ul><li>Create model Area</li><li>Create model DeviceBrand</li><li>Create model Devices</li><li>Create model DeviceType</li><li>Create model DeviceUser</li><li>Create model Task</li><li>Create model DevicesGroup</li><li>Add field device_type to devices</li><li>Add field device_user to devices</li><li>Create model NewUser</li></ul></blockquote><p> 这个错误表示: MySQL中的用户权限信息通常存储在系统数据库 mysql 中的 user 表中，而不是在您自定义的数据库（如django）中。错误信息中的表名 django.user 似乎暗示您试图在 django 数据库中查找用户表，但实际上应该是在 mysql 数据库中。</p><p>主要原因是运行程序设备ip不是数据库服务器信任地址。</p><h3 id="6-1-2-解决方案"><a href="#6-1-2-解决方案" class="headerlink" title="6.1.2 解决方案"></a>6.1.2 解决方案</h3><p>更正 UPDATE 语句，使其指向正确的表。对于修改用户权限，正确的数据库操作命令应该是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UPDATE mysql.user SET host = <span class="string">&#x27;10.139.27.%&#x27;</span> WHERE User = <span class="string">&#x27;django&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>注意：</p><p>10.139.27.%表示10.139.27.0&#x2F;24段子网</p><p>使用 mysql.user 表示系统数据库 mysql 中的 user 表。<br>使用 User 而不是 user，因为在 mysql.user 表中，用户名字段的列名是 User（首字母大写）。</p><blockquote><p>MariaDB [django]&gt; UPDATE mysql.user SET host &#x3D; ‘10.139.27.%’ WHERE User &#x3D; ‘django’;<br>Query OK, 1 row affected (0.000 sec)<br>Rows matched: 1  Changed: 1  Warnings: </p></blockquote><h3 id="6-1-3-python运行还是报错，回到数据库中继续给权限"><a href="#6-1-3-python运行还是报错，回到数据库中继续给权限" class="headerlink" title="6.1.3 python运行还是报错，回到数据库中继续给权限"></a>6.1.3 python运行还是报错，回到数据库中继续给权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON django.* TO <span class="string">&#x27;django&#x27;</span>@<span class="string">&#x27;10.139.27.%&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><h3 id="6-1-4-重新执行数据库初始化，均无报错了"><a href="#6-1-4-重新执行数据库初始化，均无报错了" class="headerlink" title="6.1.4 重新执行数据库初始化，均无报错了"></a>6.1.4 重新执行数据库初始化，均无报错了</h3><p>(NetOpsCenter) E:\pythoncode\NetOpsCenter&gt;python manage.py makemigrations app<br>No changes detected in app ‘app’<br>python manage.py migrate #无报错</p><h1 id="七、创建默认管理员账号"><a href="#七、创建默认管理员账号" class="headerlink" title="七、创建默认管理员账号"></a>七、创建默认管理员账号</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser <span class="comment">#创建管理员</span></span><br><span class="line">python manage.py <span class="built_in">help</span>  <span class="comment">#帮助</span></span><br></pre></td></tr></table></figure><p>有个天坑，是我在windows下测试发现的。</p><p>1、密码不能小于6位，且要有字母，否则无法登陆。</p><p>2、用户名必须是admin，其他用户名提示用户名无效。（登录后发现所创建用户都能看到，说明创建成功了，但是就是不能登录）</p><p>是否个例需要大家测试。</p><p>2024-5-22：实际上在linux（ubuntu22）下测试也是同样问题，大家小心。</p><h1 id="八、运行服务"><a href="#八、运行服务" class="headerlink" title="八、运行服务"></a>八、运行服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><h1 id="九、其他"><a href="#九、其他" class="headerlink" title="九、其他"></a>九、其他</h1><h2 id="9-1-防火墙放行"><a href="#9-1-防火墙放行" class="headerlink" title="9.1 防火墙放行"></a>9.1 防火墙放行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --add-port=8000/tcp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h2 id="9-2-ubuntu下手动执行脚本启动服务"><a href="#9-2-ubuntu下手动执行脚本启动服务" class="headerlink" title="9.2 ubuntu下手动执行脚本启动服务"></a>9.2 ubuntu下手动执行脚本启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 等效于@echo off，关闭命令回显，我不确认是否有效，阿里ai给的</span></span><br><span class="line"><span class="built_in">exec</span> &amp;&gt;/dev/null</span><br><span class="line"><span class="comment"># 使用conda激活miniconda3环境，可以先用conda info命令确认路径</span></span><br><span class="line"><span class="built_in">source</span> /home/bg4vrg/miniconda3/bin/activate /home/bg4vrg/miniconda3/envs/netopscenter</span><br><span class="line"><span class="comment"># 更改工作目录到NetOpsCenter目录</span></span><br><span class="line"><span class="built_in">cd</span> /home/bg4vrg/NetOpsCenter</span><br><span class="line"><span class="comment"># 运行python manage.py命令</span></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><p>注意ubuntu下要使用<code>/bin/bash netopscenter.sh</code>执行脚本，因为ubuntu和centos不同，默认解释器是dash。</p><h2 id="9-2-1-ubuntu下创建服务开机自启动"><a href="#9-2-1-ubuntu下创建服务开机自启动" class="headerlink" title="9.2.1 ubuntu下创建服务开机自启动"></a>9.2.1 ubuntu下创建服务开机自启动</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新增服务，名称为netopscenter</span></span><br><span class="line">sudo nano /etc/systemd/system/netopscenter.service</span><br><span class="line"><span class="comment"># 启用激活netopscenter服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> netopscenter.service</span><br><span class="line"><span class="comment"># 启动netopscenter服务</span></span><br><span class="line">sudo systemctl start netopscenter.service</span><br><span class="line"><span class="comment"># 查看netopscenter服务状态</span></span><br><span class="line">sudo systemctl status netopscenter.service</span><br><span class="line"><span class="comment"># 查看服务日志</span></span><br><span class="line">sudo journalctl -u netopscenter.service</span><br></pre></td></tr></table></figure><p>上面&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;netopscenter.service内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=NetOpsCenter Startup Script</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/bin/bash -c <span class="string">&#x27;/home/bg4vrg/netopscenter.sh&#x27;</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=50  <span class="comment"># 重启间隔，单位为秒</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>/bin/bash -c &#39;/home/bg4vrg/netopscenter.sh&#39;</code></p><p>这里，<code>/bin/bash -c</code>表示使用bash解释器执行紧跟其后的命令字符串</p><p>重启，检查服务生效。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/XiuziSeven/NetOpsCenter&quot;&gt;https://github.com/XiuziSeven/NetOpsCenter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作者写的介绍：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/655040014&quot;&gt;https://zhuanlan.zhihu.com/p/655040014&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为代码中backuponfig.py中相关备份路径默认是linux下路径方式，且使用了windows下没有的mkdir命令，所以导致windows中备份配置时会显示失败。&lt;/p&gt;
&lt;p&gt;这也是为什么有了这篇文章的原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../pic/2024-4-18-netopscenter-1.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装miniconda3</title>
    <link href="https://bg4vrg.com/post/20240418164858.html"/>
    <id>https://bg4vrg.com/post/20240418164858.html</id>
    <published>2024-04-18T08:48:58.000Z</published>
    <updated>2024-04-18T11:33:18.265Z</updated>
    
    <content type="html"><![CDATA[<p>windows下安装miniconda3很简单，参考CSIR大佬这篇文章：<a href="https://kiraster.github.io/posts/f2cfb11.html">https://kiraster.github.io/posts/f2cfb11.html</a></p><p>最近折腾袖子Seven的轻量化网络运维平台NetOPSCenter（<a href="https://github.com/XiuziSeven/NetOpsCenter">项目地址</a>），发现有的代码是针对linux环境写的，在windows下会因为路径和命令不支持的原因导致批量备份时发生500错误，无法使用。</p><p>这里记录下centos7下安装miniconda3的过程。后续有条件可以试试ubuntu等环境测试，毕竟centos7快挂了。</p><span id="more"></span><h1 id="一、最小化安装centos7"><a href="#一、最小化安装centos7" class="headerlink" title="一、最小化安装centos7"></a>一、最小化安装centos7</h1><p>这里不赘述了，主要是配下ip地址，安装nano、wget等基本命令。</p><h1 id="二、下载并运行miniconda3安装脚本"><a href="#二、下载并运行miniconda3安装脚本" class="headerlink" title="二、下载并运行miniconda3安装脚本"></a>二、下载并运行miniconda3安装脚本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.3.0-0-Linux-x86_64.sh --no-check-certificate</span><br><span class="line">chmod +x Miniconda3-py310_24.3.0-0-Linux-x86_64.sh</span><br><span class="line">sh Miniconda3-py310_24.3.0-0-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><h2 id="2-1-按照提示一路yes安装"><a href="#2-1-按照提示一路yes安装" class="headerlink" title="2.1 按照提示一路yes安装"></a>2.1 按照提示一路yes安装</h2><h2 id="2-2-安装路径修改为-home-miniconda3"><a href="#2-2-安装路径修改为-home-miniconda3" class="headerlink" title="2.2 安装路径修改为&#x2F;home&#x2F;miniconda3"></a>2.2 安装路径修改为&#x2F;home&#x2F;miniconda3</h2><p>尽量不安装在默认的&#x2F;root&#x2F;miniconda3下</p><p><img src="/../pic/2024-4-18-miniconda3-1.png"></p><h2 id="2-3-这一步选yes，让miniconda自动添加环境变量路径"><a href="#2-3-这一步选yes，让miniconda自动添加环境变量路径" class="headerlink" title="2.3 这一步选yes，让miniconda自动添加环境变量路径"></a>2.3 这一步选yes，让miniconda自动添加环境变量路径</h2><p><img src="/../pic/2024-4-18-miniconda3-2.png"></p><h1 id="三、重启服务器，检查安装版本"><a href="#三、重启服务器，检查安装版本" class="headerlink" title="三、重启服务器，检查安装版本"></a>三、重启服务器，检查安装版本</h1><p><code>conda --version</code></p><p><code>conda info</code></p><p><img src="/../pic/2024-4-18-miniconda3-3.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;windows下安装miniconda3很简单，参考CSIR大佬这篇文章：&lt;a href=&quot;https://kiraster.github.io/posts/f2cfb11.html&quot;&gt;https://kiraster.github.io/posts/f2cfb11.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近折腾袖子Seven的轻量化网络运维平台NetOPSCenter（&lt;a href=&quot;https://github.com/XiuziSeven/NetOpsCenter&quot;&gt;项目地址&lt;/a&gt;），发现有的代码是针对linux环境写的，在windows下会因为路径和命令不支持的原因导致批量备份时发生500错误，无法使用。&lt;/p&gt;
&lt;p&gt;这里记录下centos7下安装miniconda3的过程。后续有条件可以试试ubuntu等环境测试，毕竟centos7快挂了。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="miniconda" scheme="https://bg4vrg.com/tags/miniconda/"/>
    
    <category term="python" scheme="https://bg4vrg.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>迁移python环境到内网离线使用</title>
    <link href="https://bg4vrg.com/post/20240409201339.html"/>
    <id>https://bg4vrg.com/post/20240409201339.html</id>
    <published>2024-04-09T12:13:39.000Z</published>
    <updated>2024-04-09T12:38:53.119Z</updated>
    
    <content type="html"><![CDATA[<p>python很好，miniconda3安装也很省心。但是如果是大内网无法访问互联网，就只能望洋兴叹了。</p><p>这里记录下自己如何将互联网环境下配置好的python环境迁移到大内网机器上。</p><span id="more"></span><p>我的互联网（windows2019）和内网机器（windows10）都是windows系统，如果跨操作系统可能会有问题。</p><h1 id="一、互联网端"><a href="#一、互联网端" class="headerlink" title="一、互联网端"></a>一、互联网端</h1><h2 id="1-1-安装miniconda3"><a href="#1-1-安装miniconda3" class="headerlink" title="1.1 安装miniconda3"></a>1.1 安装miniconda3</h2><p>具体操作见之前的文章</p><h2 id="1-2-创建虚拟环境"><a href="#1-2-创建虚拟环境" class="headerlink" title="1.2 创建虚拟环境"></a>1.2 创建虚拟环境</h2><p>具体什么版本要看你运行的程序要求了</p><p>创建一个虚拟环境（指定Python版本3.10）</p><p><code>conda create -n ipa_base python=3.10</code></p><p>激活虚拟环境</p><p><code>conda activate ipa_base</code></p><h2 id="1-3-安装依赖库"><a href="#1-3-安装依赖库" class="headerlink" title="1.3 安装依赖库"></a>1.3 安装依赖库</h2><p>需要安装程序说明使用pip安装一系列依赖</p><p><code>pip install -r requirements.txt</code></p><h2 id="1-4-检查已安装哪些"><a href="#1-4-检查已安装哪些" class="headerlink" title="1.4 检查已安装哪些"></a>1.4 检查已安装哪些</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda list</span><br><span class="line">pip list</span><br></pre></td></tr></table></figure><h2 id="1-5-安装打包工具conda-pack"><a href="#1-5-安装打包工具conda-pack" class="headerlink" title="1.5 安装打包工具conda-pack"></a>1.5 安装打包工具conda-pack</h2><p><code>pip install conda-pack</code></p><p>如果网络有问题就换个源</p><p><code>pip install conda-pack -i http://mirrors.aliyun.com/pypi/simple --trusted-host mirrors.aliyun.com</code></p><h2 id="1-6-打包"><a href="#1-6-打包" class="headerlink" title="1.6 打包"></a>1.6 打包</h2><p><code>conda pack -n env_name</code></p><p>env_name表示你要打包的那个虚拟环境名字，我要打包的虚拟环境是ipa_base，使用下面命令</p><p><code>conda pack -n ipa_base</code>就能在当前目录找到一个压缩文件ipa_base.tar.gz，然后把这个文件和miniconda3安装包复制到内网电脑上。</p><h1 id="二、内网端"><a href="#二、内网端" class="headerlink" title="二、内网端"></a>二、内网端</h1><h2 id="2-1-安装miniconda3"><a href="#2-1-安装miniconda3" class="headerlink" title="2.1 安装miniconda3"></a>2.1 安装miniconda3</h2><h2 id="2-2-迁移虚拟环境"><a href="#2-2-迁移虚拟环境" class="headerlink" title="2.2 迁移虚拟环境"></a>2.2 迁移虚拟环境</h2><p>找到miniconda3的安装目录下的envs文件夹，我的路径如下</p><p><code>D:\miniconda3\envs</code></p><p>将ipa_base.tar.gz解压到envs文件夹下，路径如下</p><p><code>D:\miniconda3\envs\ipa_base</code></p><h2 id="2-3-激活虚拟环境"><a href="#2-3-激活虚拟环境" class="headerlink" title="2.3 激活虚拟环境"></a>2.3 激活虚拟环境</h2><p><code>conda activate ipa_base</code></p><h2 id="2-4-检查安装依赖"><a href="#2-4-检查安装依赖" class="headerlink" title="2.4 检查安装依赖"></a>2.4 检查安装依赖</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -V</span><br><span class="line">conda info</span><br><span class="line">conda list</span><br><span class="line">pip list</span><br></pre></td></tr></table></figure><h1 id="三、至此已完成迁移，可以直接运行程序了"><a href="#三、至此已完成迁移，可以直接运行程序了" class="headerlink" title="三、至此已完成迁移，可以直接运行程序了"></a>三、至此已完成迁移，可以直接运行程序了</h1><p>本文参考：<a href="https://www.cnblogs.com/jack-nie-23/p/16900926.html">https://www.cnblogs.com/jack-nie-23/p/16900926.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;python很好，miniconda3安装也很省心。但是如果是大内网无法访问互联网，就只能望洋兴叹了。&lt;/p&gt;
&lt;p&gt;这里记录下自己如何将互联网环境下配置好的python环境迁移到大内网机器上。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="python" scheme="https://bg4vrg.com/tags/python/"/>
    
    <category term="miniconda3" scheme="https://bg4vrg.com/tags/miniconda3/"/>
    
  </entry>
  
  <entry>
    <title>miniconda3环境下安装调试网络自动化巡检工具singvis/Network_Automatic_Inspect</title>
    <link href="https://bg4vrg.com/post/20240407191300.html"/>
    <id>https://bg4vrg.com/post/20240407191300.html</id>
    <published>2024-04-07T11:13:00.000Z</published>
    <updated>2024-04-07T13:05:08.668Z</updated>
    
    <content type="html"><![CDATA[<p>适用于网络工程师自动化采集设备信息、下发配置、保存设备配置及批量ping等功能。</p><p>项目地址：<a href="https://github.com/singvis/Network_Automatic_Inspect">https://github.com/singvis/Network_Automatic_Inspect</a></p><span id="more"></span><h1 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h1><h2 id="1-1-python版本"><a href="#1-1-python版本" class="headerlink" title="1.1 python版本"></a>1.1 python版本</h2><p>python推荐3.9以上，我这里使用miniconda3创建了一个名为network_auto的虚拟环境，python版本为3.10</p><h2 id="1-2-第三方模块"><a href="#1-2-第三方模块" class="headerlink" title="1.2 第三方模块"></a>1.2 第三方模块</h2><p><code>pip install -r requirement.txt</code></p><p>文件主要包括如下必要模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netmiko==3.4.0</span><br><span class="line">prettytable==3.3.0</span><br><span class="line">openpyxl==3.0.9</span><br></pre></td></tr></table></figure><p><img src="/../pic/2024-04-07-network_auto.png"></p><h2 id="1-3-巡检模板"><a href="#1-3-巡检模板" class="headerlink" title="1.3 巡检模板"></a>1.3 巡检模板</h2><p>打开<code>巡检模板.xlsx</code>, 主要分2个sheet：</p><ul><li>网络设备资产表（assets）<img src="/../pic/2024-04-07-network_auto1.png"></li></ul><p><strong>字段说明：</strong></p><ol><li>hostname: <strong>可选项</strong>，设备名称，仅标识作用,代码不会执行该字段.</li><li>comment: <strong>可选项</strong>, 注释，可用于执行设备巡检或不巡检.</li><li>ip: <strong>必填项，</strong>管理IP地址，.</li><li>protocl: <strong>必填项</strong>，连接协议，支持ssh和telnet.</li><li>port：<strong>可选项</strong>，协议端口号，支持自定义端口(自定义为必填)。</li><li>username：<strong>可选项</strong>，设备登陆用户名，.</li><li>password：<strong>可选项</strong>，设备登陆密码，.</li><li>secret：<strong>可选项</strong>，特权&#x2F;超级密码，.</li><li>device_type：<strong>必填项</strong>，设备类型，.</li></ol><ul><li>巡检命令表 <img src="/../pic/2024-04-07-network_auto2.png" alt="img"></li></ul><p><strong>字段说明：</strong></p><ol><li>comment: <strong>可选项</strong>, 注释，可用于执行或不执行的命令.</li><li>command：**必填项，巡检的命令</li></ol><h1 id="二、开始你的使用"><a href="#二、开始你的使用" class="headerlink" title="二、开始你的使用"></a>二、开始你的使用</h1><p><code>python 网络自动化巡检工具20231009.py</code></p><p>可通过pycharm、vscode或python IDE等工具执行脚本文件，如下所示： <img src="/../pic/2024-04-07-network_auto3.png" alt="img"></p><p> <strong>选项说明：</strong></p><ol><li><p>连接设备：执行后仅用于获取到设备名称，测试连接性。</p></li><li><p>采集设备信息：通过执行模板里预置命令采集回显内容。</p></li></ol><p><img src="/../pic/2024-04-07-network_auto4.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;适用于网络工程师自动化采集设备信息、下发配置、保存设备配置及批量ping等功能。&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/singvis/Network_Automatic_Inspect&quot;&gt;https://github.com/singvis/Network_Automatic_Inspect&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="python" scheme="https://bg4vrg.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>一款优秀的开源局域网ip管理软件-IPA_VIEW</title>
    <link href="https://bg4vrg.com/post/20240406194758.html"/>
    <id>https://bg4vrg.com/post/20240406194758.html</id>
    <published>2024-04-06T11:47:58.000Z</published>
    <updated>2024-04-18T12:20:48.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、项目简介"><a href="#一、项目简介" class="headerlink" title="一、项目简介"></a>一、项目简介</h1><p>项目地址：<a href="https://github.com/kiraster/IPA_VIEW_v0.1_Beta">https://github.com/kiraster/IPA_VIEW_v0.1_Beta</a></p><p>一个使用 Flask 框架组装的IP地址管理平台，很简陋</p><p>在配置文件<code>/app/config.py</code> 配置好指定交换机的snmp v2c 只读团体名称后，可以定时轮询指定交换机的arp数据，将获得的ip、mac地址及轮询时间写进数据库；下一次没有轮询到的已知ip会被设置为离线状态</p><p>这样就可以拿到一份准确的局域网设备数据（包括曾短暂上线后被轮询到但之后离线的）</p><span id="more"></span><p>前端：Bootstrap、Datatable、sweetalert……</p><p>后端：Flask、APScheduler……</p><p>数据库：SQLite</p><h1 id="二、内置功能"><a href="#二、内置功能" class="headerlink" title="二、内置功能"></a>二、内置功能</h1><ul><li>首页：<em>没有首页的首页</em> </li><li>IP地址表：显示IP地址使用情况，可在页面进行增、删、改、导出到Excel表格</li><li>分组：按分组 + 网段显示目录树，右侧显示所选择查看网段的饼图，方块表和网段IP地址表</li><li>设置：查看定时任务执行情况和轮询参数；将ip子网添加到指定分组</li><li>数据库：无功能，被定向到404</li><li>关于：一段话</li></ul><h1 id="三、项目结构"><a href="#三、项目结构" class="headerlink" title="三、项目结构"></a>三、项目结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">|   app.py  # 没什么用装个样子</span><br><span class="line">|   manage.py  #　应用入口文件</span><br><span class="line">|   README.md</span><br><span class="line">|   requirements.txt　　＃　安装库</span><br><span class="line">|   </span><br><span class="line">+---app</span><br><span class="line">|   |   commands.py  # 自定义插入组命令</span><br><span class="line">|   |   config.py　　＃　配置文件</span><br><span class="line">|   |   models.py　　＃　数据模型类代码</span><br><span class="line">|   |   task.py　　＃　定时任务代码</span><br><span class="line">|   |   test_data.py　　＃　导入测试数据</span><br><span class="line">|   |   __init__.py</span><br><span class="line">|   |   </span><br><span class="line">|   +---admin</span><br><span class="line">|   |   |   lib.py　　＃ 可复用功能函数代码</span><br><span class="line">|   |   |   views.py　　＃ 视图函数代码</span><br><span class="line">|   |   |   __init__.py</span><br><span class="line">|   |           </span><br><span class="line">|   +---static　　＃　CSS JS 插件</span><br><span class="line">|   |           </span><br><span class="line">|   +---templates  # 被渲染的html模板</span><br><span class="line">|   |   |   404.html  # 404 页面</span><br><span class="line">|   |   |   </span><br><span class="line">|   |   \---admin</span><br><span class="line">|   |           about.html</span><br><span class="line">|   |           base.html</span><br><span class="line">|   |           index.html</span><br><span class="line">|   |           ipgroup.html</span><br><span class="line">|   |           ipshow.html</span><br><span class="line">|   |           settings.html</span><br><span class="line">|              </span><br><span class="line">|           </span><br><span class="line">+---instance  # flask db 命令自动生成的文件夹</span><br><span class="line">|       db.sqlite3  # sqlite3数据库文件</span><br><span class="line">|       </span><br><span class="line">+---migrations  # flask db 命令自动生成的文件夹</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="四、安装使用"><a href="#四、安装使用" class="headerlink" title="四、安装使用"></a>四、安装使用</h1><h2 id="4-1-下载源码备用"><a href="#4-1-下载源码备用" class="headerlink" title="4.1 下载源码备用"></a>4.1 下载源码备用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># git</span><br><span class="line">git clone https://github.com/kiraster/IPA_VIEW_v0.1_Beta.git</span><br><span class="line"></span><br><span class="line"># ZIP</span><br><span class="line">https://github.com/kiraster/IPA_VIEW_v0.1_Beta  -&gt;&gt;  Code  –&gt;&gt; Download ZIP</span><br></pre></td></tr></table></figure><h2 id="4-2-安装python并配置虚拟环境"><a href="#4-2-安装python并配置虚拟环境" class="headerlink" title="4.2 安装python并配置虚拟环境"></a>4.2 安装python并配置虚拟环境</h2><p>经过热心群众测试python3.12运行本代码有错误，使用python3.10可以完美规避安装环境报错问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 使用venv</span><br><span class="line"># 创建虚拟环境</span><br><span class="line">python -m venv venv</span><br><span class="line">#  进入虚拟环境</span><br><span class="line">.\venv\Scripts\activate</span><br><span class="line"></span><br><span class="line"># 使用miniconda3</span><br><span class="line"># 可以miniconda安装python，使用介绍见作者博客https://kiraster.github.io/posts/f2cfb11.html</span><br><span class="line"># 创建一个虚拟环境（指定Python版本3.10）</span><br><span class="line">conda create -n ipa_base python=3.10</span><br><span class="line"># 激活虚拟环境</span><br><span class="line">conda activate ipa_base</span><br></pre></td></tr></table></figure><h2 id="4-3-修改配置"><a href="#4-3-修改配置" class="headerlink" title="4.3 修改配置"></a>4.3 修改配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># 定义flask代码中的配置项</span><br><span class="line">class FlaskConfig:</span><br><span class="line">    HOST = &#x27;127.0.0.1&#x27;  # 设置主机地址，&#x27;0.0.0.0&#x27; 表示监听所有可用的网络接口</span><br><span class="line">    PORT = 80  # 设置端口号，此处设置仅python manage.py启动有效；flask run模式参考4.5</span><br><span class="line">    # 开启调试模式</span><br><span class="line">    DEBUG = True</span><br><span class="line">    # 数据库连接URI</span><br><span class="line">    SQLALCHEMY_DATABASE_URI = &#x27;sqlite:///db.sqlite3&#x27;</span><br><span class="line">    # SQLALCHEMY_TRACK_MODIFICATIONS当设置为True时，SQLAlchemy会在对数据库进行修改操作（如添加、更新、删除记录）后发出信号，</span><br><span class="line">    # 以便其他组件（如Flask-Migrate）能够捕获这些变化并生成相应的数据库迁移脚本。</span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = False</span><br><span class="line">    # 定义SECRET_KEY，CSRF保护需要一个密钥来安全地对令牌进行签名。</span><br><span class="line">    # 默认情况下，这将使用Flask应用程序的SECRET_KEY。如果想使用单独的令牌，可以设置WTF_CSRF_SECRET_KEY</span><br><span class="line">    SECRET_KEY = &#x27;21caf73529034bf8ad2d04e820dc2f1d&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># APScheduler配置参数</span><br><span class="line"># job1 和 job2 时间建议从30改为300</span><br><span class="line">class APSchedulerConfig:</span><br><span class="line">    # 开启API查询接口</span><br><span class="line">    SCHEDULER_API_ENABLED = True</span><br><span class="line">    job1_name = &#x27;定时轮询ARP表&#x27;</span><br><span class="line">    job2_name = &#x27;定时更新没有轮询到ARP表项的IP地址状态&#x27;</span><br><span class="line">    job1_seconds = 300</span><br><span class="line">    job2_seconds = 300</span><br><span class="line">    # 最大定时任务实例数</span><br><span class="line">    # 此数值是指“比如说你网络卡了30分钟以上，而前一次轮询没有完成，就会堆积到2次轮询任务，大概就是这么个意思”</span><br><span class="line">    SCHEDULER_MAX_INSTANCES = 66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class SNMPConfig:</span><br><span class="line">    # 当超过30分钟没有updated_at值更新，则available值置为False；单位：分钟</span><br><span class="line">    REFRESH_TIME = 30</span><br><span class="line">    SNMP_DATA = [</span><br><span class="line">        &#123;&#x27;snmp_host&#x27;: &#x27;192.168.56.10&#x27;, &#x27;snmp_community&#x27;: &#x27;public&#x27;&#125;,</span><br><span class="line">        &#123;&#x27;snmp_host&#x27;: &#x27;192.168.56.20&#x27;, &#x27;snmp_community&#x27;: &#x27;xswl_public&#x27;&#125;,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="4-4-安装库"><a href="#4-4-安装库" class="headerlink" title="4.4 安装库"></a>4.4 安装库</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"># 网络不行用下面这个</span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple/  -r requirements.txt</span><br></pre></td></tr></table></figure><h2 id="4-5-运行"><a href="#4-5-运行" class="headerlink" title="4.5 运行"></a>4.5 运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 创建当前版本的数据迁移脚本</span><br><span class="line">flask db init</span><br><span class="line"># 数据迁移脚本</span><br><span class="line">flask db migrate</span><br><span class="line"># 创建数据库</span><br><span class="line">flask db upgrade</span><br><span class="line"></span><br><span class="line"># 在IPGroup表创建一个默认组</span><br><span class="line"># 输入以下命令，填写默认组组，回车使用默认值“Default”，默认组名称随意起都可</span><br><span class="line">flask insert group</span><br><span class="line">Name [default]: </span><br><span class="line"></span><br><span class="line"># [可选]，导入测试数据，如果可以抓到snmp数据不要导入，不然还要逐行删除</span><br><span class="line"> python .\app\test_data.py</span><br><span class="line"></span><br><span class="line"># 启动应用</span><br><span class="line"># 注意2种方式访问端口不一样</span><br><span class="line">python manage.py</span><br><span class="line"># 相关配置在class FlaskConfig中</span><br><span class="line"># 或第二种办法</span><br><span class="line">flask run（建议用此方式）</span><br><span class="line"># 此模式启动仅支持在本机使用固定地址http://127.0.0.1:5000/admin访问，即使修改config.py中相应参数也无效。</span><br><span class="line"># 若想修改默认5000端口并运行通过ip:端口方式访问，请以下面命令运行，并注意放行相关防火墙端口。</span><br><span class="line">flask run -h 0.0.0.0 -p 8080</span><br><span class="line"># -h 后为要监听的网络接口地址，&#x27;0.0.0.0&#x27; 表示监听所有可用的网络接口</span><br><span class="line"># -p 后数字为要修改的服务端口</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../pic/2024-04-07-ipa1.png"></p><h1 id="五、设置"><a href="#五、设置" class="headerlink" title="五、设置"></a>五、设置</h1><h2 id="5-1-ip子网手动分组"><a href="#5-1-ip子网手动分组" class="headerlink" title="5.1 ip子网手动分组"></a>5.1 ip子网手动分组</h2><p>网页前端设置选项那里可以手动将ip子网（类似192.168.1.0&#x2F;24）创建到新的分组里，支持中文，同时该子网在默认分组里会自动去掉，只显示你创建的分组里。</p><p>注意当某分组内子网有新设备上线后，会自动显示在默认分组中，需要手动重新添加了。</p><h2 id="5-2-关于删除不生效"><a href="#5-2-关于删除不生效" class="headerlink" title="5.2 关于删除不生效"></a>5.2 关于删除不生效</h2><p>需要手动刷新网页</p><h2 id="5-3-预览"><a href="#5-3-预览" class="headerlink" title="5.3 预览"></a>5.3 预览</h2><p>浏览器地址栏输入：127.0.0.1&#x2F;admin&#x2F; ，或者  127.0.0.1[:port]&#x2F;admin&#x2F;</p><h2 id="5-4-批处理文件自启动"><a href="#5-4-批处理文件自启动" class="headerlink" title="5.4 批处理文件自启动"></a>5.4 批处理文件自启动</h2><p>为了最大限度解放打工人，需要做到一键运行乃至开机即启动。</p><h3 id="5-4-1-准备批处理运行环境"><a href="#5-4-1-准备批处理运行环境" class="headerlink" title="5.4.1 准备批处理运行环境"></a>5.4.1 准备批处理运行环境</h3><p>找到AnacondaPrompt(miniconda3)图标，查看图标属性并复制目标栏内内容备用</p><p><img src="/../pic/2024-04-07-ipa2.png"></p><p><code>%windir%\System32\cmd.exe &quot;/K&quot; C:\miniconda3\Scripts\activate.bat C:\miniconda3</code></p><p>复制”&#x2F;K”后面的内容,不要照抄，安装路径都不一定相同</p><p><code>C:\miniconda3\Scripts\activate.bat C:\miniconda3</code></p><h3 id="5-4-2-批处理内容"><a href="#5-4-2-批处理内容" class="headerlink" title="5.4.2 批处理内容"></a>5.4.2 批处理内容</h3><p>为了调用miniconda3，需要在命令前加call，完整批处理内容如下，保存为bat文件即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">call C:\miniconda3\Scripts\activate.bat C:\miniconda3</span><br><span class="line">call activate ipa_base</span><br><span class="line">cd /d C:\ipa_VIEW</span><br><span class="line">call python manage.py</span><br><span class="line">cmd /k</span><br></pre></td></tr></table></figure><p><b>仅供参考</b></p><p>注意：<br>C:\ipa_VIEW是我程序解压的位置，&#x2F;d参数用于跨盘符切换</p><p>cmd &#x2F;k是为了不关闭cmd窗口</p><p>运行效果如下图</p><p><img src="/../pic/2024-04-07-ipa3.png"></p><h1 id="六、预览截图"><a href="#六、预览截图" class="headerlink" title="六、预览截图"></a>六、预览截图</h1><p>参考 <a href="https://kiraster.github.io/gallery/IPA_VIEW_v0.1_Beta/">https://kiraster.github.io/gallery/IPA_VIEW_v0.1_Beta/</a></p><p><img src="/../pic/2024-04-07-ipa4.png"></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>2024-4-9 </p><p>1、可以通过scripts代码实现简单加密访问，放到index.html就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT language=JavaScript&gt; </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">password</span></span>() &#123; </span><br><span class="line">var testV = 1; </span><br><span class="line">var pass1 = prompt(<span class="string">&#x27;请输入密码:&#x27;</span>,<span class="string">&#x27;&#x27;</span>); </span><br><span class="line"><span class="keyword">while</span> (testV &lt; 3) &#123; </span><br><span class="line"><span class="keyword">if</span> (!pass1) </span><br><span class="line">history.go(-1); </span><br><span class="line"><span class="keyword">if</span> (pass1 == <span class="string">&quot;这里输入你想设置的密码&quot;</span>) &#123; </span><br><span class="line">alert(<span class="string">&#x27;密码正确!&#x27;</span>); </span><br><span class="line"><span class="built_in">break</span>; </span><br><span class="line">&#125; </span><br><span class="line">testV+=-1; </span><br><span class="line">var pass1 = prompt(<span class="string">&#x27;密码错误!请重新输入:&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> (pass1!=<span class="string">&quot;password&quot;</span> &amp; testV ==3) </span><br><span class="line">history.go(-1); </span><br><span class="line"><span class="built_in">return</span> <span class="string">&quot; &quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line">document.write(password()); </span><br><span class="line">&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure><p>2、子网添加分组后，一段时间在default组还会发现同样子网。这是因为又扫描到了新地址。作者CsiR这样回复的：</p><blockquote><p>是，写入sqlite的时候没加判断，分组跑默认值去了</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;一、项目简介&quot;&gt;&lt;a href=&quot;#一、项目简介&quot; class=&quot;headerlink&quot; title=&quot;一、项目简介&quot;&gt;&lt;/a&gt;一、项目简介&lt;/h1&gt;&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/kiraster/IPA_VIEW_v0.1_Beta&quot;&gt;https://github.com/kiraster/IPA_VIEW_v0.1_Beta&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个使用 Flask 框架组装的IP地址管理平台，很简陋&lt;/p&gt;
&lt;p&gt;在配置文件&lt;code&gt;/app/config.py&lt;/code&gt; 配置好指定交换机的snmp v2c 只读团体名称后，可以定时轮询指定交换机的arp数据，将获得的ip、mac地址及轮询时间写进数据库；下一次没有轮询到的已知ip会被设置为离线状态&lt;/p&gt;
&lt;p&gt;这样就可以拿到一份准确的局域网设备数据（包括曾短暂上线后被轮询到但之后离线的）&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://bg4vrg.com/categories/network/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="python" scheme="https://bg4vrg.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>重拾我的kindle4-通过calibre-web同步电子书</title>
    <link href="https://bg4vrg.com/post/20240406194632.html"/>
    <id>https://bg4vrg.com/post/20240406194632.html</id>
    <published>2024-04-06T11:46:32.000Z</published>
    <updated>2024-04-06T12:18:11.837Z</updated>
    
    <content type="html"><![CDATA[<p>我的kindle4是十多年前在美亚海淘的，所以需要在美亚上查看接收地址。中亚kindle服务早已关闭，中亚也仅剩下小程序苟延残喘，如果是国行设备，应该需要将设备注册到美亚上。</p><p>查看设置在这里，默认是英文界面，我在首页提前设置了中文</p><span id="more"></span><p>设置地址可以直接访问这里</p><p><code>https://www.amazon.com/hz/mycd/myx#/home/settings/payment</code></p><p><img src="/../pic/2024-04-06-kindle1.png"></p><p><img src="/../pic/2024-04-06-kindle2.png"></p><h1 id="一、kindle接收地址"><a href="#一、kindle接收地址" class="headerlink" title="一、kindle接收地址"></a>一、kindle接收地址</h1><p>我的kindle注册早，还是kindle.cn后缀。这个地址要填到calibre-web作为接收地址</p><h1 id="二、calibre-web发送地址"><a href="#二、calibre-web发送地址" class="headerlink" title="二、calibre-web发送地址"></a>二、calibre-web发送地址</h1><p>一般选择常用个人邮箱地址，并把它填到上图的“已认可的发件人邮箱列表”。</p><p>注意如果使用gmail要保证calibre网络环境可以访问google，我这里用的是qq邮箱。qq邮箱设置要注意，他的密码不是你平常登录qq邮箱的密码，而是单独设定的所谓“授权码”，这需要你用你绑定的手机号码发送一条短信，1毛钱的短信费可比流量贵多了现在。同样需要用户主动发送短信的还有个豆瓣，挺恶心的。</p><p><img src="/../pic/2024-04-06-kindle3.png"></p><p><img src="/../pic/2024-04-06-kindle4.png"></p><p><img src="/../pic/2024-04-06-kindle5.png"></p><p>注意下这里附件大小默认限制25MB，亚马逊好像限制50MB，可以适当改高点。</p><p><img src="/../pic/2024-04-06-kindle6.png" alt="查看任务状态"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的kindle4是十多年前在美亚海淘的，所以需要在美亚上查看接收地址。中亚kindle服务早已关闭，中亚也仅剩下小程序苟延残喘，如果是国行设备，应该需要将设备注册到美亚上。&lt;/p&gt;
&lt;p&gt;查看设置在这里，默认是英文界面，我在首页提前设置了中文&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="网络" scheme="https://bg4vrg.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>部署calibre-web电子书服务</title>
    <link href="https://bg4vrg.com/post/20240330122111.html"/>
    <id>https://bg4vrg.com/post/20240330122111.html</id>
    <published>2024-03-30T04:21:11.000Z</published>
    <updated>2024-03-30T02:57:22.232Z</updated>
    
    <content type="html"><![CDATA[<p>calibre-web可以实现在线阅读、发送到kindle（美区）、刮削书籍信息等功能。唯一缺点就是目录不人性化，导入后会很乱-所有书籍都在一个library目录里，不能像emby那样刮削后仍然保留预先创建的媒体目录。</p><span id="more"></span><h1 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h1><p>因为7.1的docker注册表被强了，先进ssh里拉下镜像</p><p><code>docker pull johngong/calibre-web</code></p><p><img src="/../pic/2024-3-24-calibre1.png"></p><h2 id="1-1-以下是cli命令行配置参数"><a href="#1-1-以下是cli命令行配置参数" class="headerlink" title="1.1 以下是cli命令行配置参数"></a>1.1 以下是cli命令行配置参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker create  \</span><br><span class="line">   --name=calibre-web  \</span><br><span class="line">   -p 8083:8083  \</span><br><span class="line">   -p 8080:8080  \</span><br><span class="line">   -v /配置文件位置:/config  \</span><br><span class="line">   -v /书库:/library  \</span><br><span class="line">   -v /自动添加文件夹:/autoaddbooks  \</span><br><span class="line">   -e UID=1000  \</span><br><span class="line">   -e GID=1000  \</span><br><span class="line">   -e CALIBRE_SERVER_USER=用户名  \</span><br><span class="line">   -e CALIBRE_SERVER_PASSWORD=用户密码 \</span><br><span class="line">   --restart unless-stopped  \</span><br><span class="line">   johngong/calibre-web:latest</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量:"></a>变量:</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--name=calibre-web</code></td><td>容器名</td></tr><tr><td><code>-p 8083:8083</code></td><td>calibre-web web访问端口,默认用户名: admin 默认密码: admin123</td></tr><tr><td><code>-p 8080:8080</code></td><td>calibre-server web访问端口</td></tr><tr><td><code>-v /配置文件位置:/config</code></td><td>calibre-web与calibre-server配置位置文件</td></tr><tr><td><code>-v /书库:/library</code></td><td>calibre-web与calibre-server书库默认位置</td></tr><tr><td><code>-v /自动添加文件夹:/autoaddbooks</code></td><td>calibre自动添加图书文件夹位置</td></tr><tr><td><code>-e UID=1000</code></td><td>uid设置,默认为1000</td></tr><tr><td><code>-e GID=1000</code></td><td>gid设置,默认为1000</td></tr><tr><td><code>-e ENABLE_CALIBRE_SERVER=true</code></td><td>(true|false)设定开启calibre-server，默认开启</td></tr><tr><td><code>-e ENABLE_CALIBRE_SERVER_OPDS=false</code></td><td>(true|false)开启calibre-server的OPDS功能，默认不开启，arm可能不可用</td></tr><tr><td><code>-e CALIBRE_SERVER_USER=用户名</code></td><td>calibre-server 用户名</td></tr><tr><td><code>-e CALIBRE_SERVER_PASSWORD=用户密码</code></td><td>calibre-server 用户密码</td></tr><tr><td><code>-e CALIBRE_SERVER_WEB_LANGUAGE=zh_CN</code></td><td>calibre-server web界面语言，默认中文，详见calibre-server其它语言</td></tr><tr><td><code>-e CALIBRE_ASCII_FILENAME=true</code></td><td>(true|false)设定false时calibre支持中文目录</td></tr><tr><td><code>-e CALIBRE_WEB_LANGUAGE=zh_Hans_CN</code></td><td>(zh_Hans_CN|en)calibre-web初始界面语言，详见calibre-web其它语言</td></tr><tr><td><code>-e TZ=Asia/Shanghai</code></td><td>系统时区设置,默认为Asia&#x2F;Shanghai</td></tr><tr><td><code>-e CALIBREDB_OTHER_OPTION=</code></td><td>为自动添加脚本中calibredb命令添加其它参数,例如：duplicates命令[-d]</td></tr><tr><td><code>-e DISABLE_GOOGLE_SEARCH=false</code></td><td>(true|false)设定禁用google搜索，默认不开启</td></tr><tr><td><code>-e DISABLE_SCHOLAR_SEARCH=false</code></td><td>(true|false)设定禁用scholar搜索，默认不开启</td></tr><tr><td><code>-e ENABLE_CHOWN_LIBRARY=true</code></td><td>(true|false)设定修复library文件夹拥有者，默认开启</td></tr><tr><td><code>-e CALIBRE_LOCALHOST=true</code></td><td>(true|false)设定从本地主机和本地网络加载封面，默认开启</td></tr><tr><td><code>-e ENABLE_FIX_COVER_COLOR=false</code></td><td>(true|false)设定修复封面颜色偏暗，默认关闭</td></tr></tbody></table><h2 id="1-2-群晖docker设置："><a href="#1-2-群晖docker设置：" class="headerlink" title="1.2 群晖docker设置："></a>1.2 群晖docker设置：</h2><ol><li>卷</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>本地文件夹1:/library</code></td><td>calibre-web与calibre-server书库默认位置</td></tr><tr><td><code>本地文件夹2:/config</code></td><td>calibre-web与calibre-server配置位置文件</td></tr><tr><td><code>本地文件夹3:/autoaddbooks</code></td><td>calibre自动添加图书文件夹位置</td></tr></tbody></table><ol><li>端口</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>本地端口1:8083</code></td><td>calibre-web web访问端口,默认用户名: admin 默认密码: admin123</td></tr><tr><td><code>本地端口2:8080</code></td><td>calibre-server web访问端口</td></tr></tbody></table><ol><li>环境变量：</li></ol><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>UID=1000</code></td><td>uid设置,默认为1000</td></tr><tr><td><code>GID=1000</code></td><td>gid设置,默认为1000</td></tr><tr><td><code>ENABLE_CALIBRE_SERVER=true</code></td><td>(true|false)设定开启calibre-server，默认开启</td></tr><tr><td><code>ENABLE_CALIBRE_SERVER_OPDS=false</code></td><td>(true|false)开启calibre-server的OPDS功能，默认不开启，arm可能不可用</td></tr><tr><td><code>CALIBRE_SERVER_USER=</code></td><td>calibre-server 用户名</td></tr><tr><td><code>CALIBRE_SERVER_PASSWORD=</code></td><td>calibre-server 用户密码</td></tr><tr><td><code>CALIBRE_SERVER_WEB_LANGUAGE=zh_CN</code></td><td>calibre-server web界面语言，详见calibre-server其它语言</td></tr><tr><td><code>CALIBRE_ASCII_FILENAME=true</code></td><td>(true|false)设定false时calibre支持中文目录</td></tr><tr><td><code>CALIBRE_WEB_LANGUAGE=zh_Hans_CN</code></td><td>(zh_Hans_CN|en)calibre-web初始界面语言，详见calibre-web其它语言</td></tr><tr><td><code>TZ=Asia/Shanghai</code></td><td>系统时区设置,默认为Asia&#x2F;Shanghai</td></tr><tr><td><code>CALIBREDB_OTHER_OPTION=</code></td><td>为自动添加脚本中calibredb命令添加其它参数,例如：duplicates命令[-d]</td></tr><tr><td><code>DISABLE_GOOGLE_SEARCH=false</code></td><td>(true|false)设定禁用google搜索，默认不开启</td></tr><tr><td><code>DISABLE_SCHOLAR_SEARCH=false</code></td><td>(true|false)设定禁用scholar搜索，默认不开启</td></tr><tr><td><code>ENABLE_CHOWN_LIBRARY=true</code></td><td>(true|false)设定修复library文件夹拥有者，默认开启</td></tr><tr><td><code>CALIBRE_LOCALHOST=true</code></td><td>(true|false)设定从本地主机和本地网络加载封面，默认开启</td></tr><tr><td><code>ENABLE_FIX_COVER_COLOR=false</code></td><td>(true|false)设定修复封面颜色偏暗，默认关闭</td></tr></tbody></table><h2 id="二、用户密码与书记转换"><a href="#二、用户密码与书记转换" class="headerlink" title="二、用户密码与书记转换"></a>二、用户密码与书记转换</h2><ul><li><p>配置calibre-server用户名及密码，可用其上传图书（登录后设置里开启）。</p><p>注意：我这里设置后失效，仍然需要用admin&#x2F;admin1234的默认密码，可能和默认密码强度不够有关。</p></li><li><p>ebook-convert转换其它格式到PDF时需要字体SimSun.ttf，复制到&#x2F;config&#x2F;fonts目录对应的宿主机目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PDF字体设置：复制字体到文件夹，重启docker。</span><br><span class="line">旧：/config/calibre-server/calibrefonts（本地文件夹2/calibre-server/calibrefonts）</span><br><span class="line">新：/config/fonts（本地文件夹2/fonts）</span><br></pre></td></tr></table></figure></li></ul><p> <img src="/../pic/2024-3-24-calibre2.png"></p><h1 id="三、-删除失效刮削api并新增新豆瓣api"><a href="#三、-删除失效刮削api并新增新豆瓣api" class="headerlink" title="三、 删除失效刮削api并新增新豆瓣api"></a>三、 删除失效刮削api并新增新豆瓣api</h1><p>新豆瓣api地址，下载</p><p><code>https://github.com/fugary/calibre-web-douban-api/blob/main/src/NewDouban.py</code></p><p>提前上传到&#x2F;config映射的宿主机目录&#x2F;volume3&#x2F;docker&#x2F;calibre-web&#x2F;config&#x2F;</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker exec -it ae2bf29dda39 /bin/sh  #ae2bf29dda39是容器id</span><br><span class="line">cp /config/NewDouban.py /usr/local/calibre-web/app/cps/metadata_provider/NewDouban.py</span><br></pre></td></tr></table></figure><p>  内置的其他api没用，而且会因为网络不可达导致网页卡死，所以要用rm命令删除其他py文件</p><p><img src="/../pic/2024-3-24-calibre3.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;calibre-web可以实现在线阅读、发送到kindle（美区）、刮削书籍信息等功能。唯一缺点就是目录不人性化，导入后会很乱-所有书籍都在一个library目录里，不能像emby那样刮削后仍然保留预先创建的媒体目录。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://bg4vrg.com/categories/linux/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="linux" scheme="https://bg4vrg.com/tags/linux/"/>
    
    <category term="docker" scheme="https://bg4vrg.com/tags/docker/"/>
    
    <category term="calibre-web" scheme="https://bg4vrg.com/tags/calibre-web/"/>
    
  </entry>
  
  <entry>
    <title>seo优化之baidu收录</title>
    <link href="https://bg4vrg.com/post/20240320122111.html"/>
    <id>https://bg4vrg.com/post/20240320122111.html</id>
    <published>2024-03-20T04:21:11.000Z</published>
    <updated>2024-03-20T05:30:45.518Z</updated>
    
    <content type="html"><![CDATA[<p>接上篇<a href="https://bg4vrg.com/post/20240224112601.html">《seo优化之google收录》</a>，本篇记录下百度seo记录。不主动提交，它就是不收入我的博客。</p><span id="more"></span><h1 id="一、生成sitemap文件"><a href="#一、生成sitemap文件" class="headerlink" title="一、生成sitemap文件"></a>一、生成sitemap文件</h1><p>hexo-generator-baidu-sitemap则是针对百度。注意参数加上–no-fund –no-audit，否则会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save-dev --no-fund --no-audit</span><br></pre></td></tr></table></figure><p>安装完成后，重启hexo，执行<code>hexo g &amp;&amp; hexo s</code>后，在public目录下生成对应的xml文件。</p><p>本地可以通过下面地址访问到sitemap文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>确认可以访问到后，部署到网站</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>确认可以通过你的网站URL访问，比如我的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://bg4vrg.com/baidusitemap.xml</span><br></pre></td></tr></table></figure><h1 id="二、百度添加网站"><a href="#二、百度添加网站" class="headerlink" title="二、百度添加网站"></a>二、百度添加网站</h1><p><img src="/../pic/2024-3-20-baideseo1.png"></p><p><img src="/../pic/2024-3-20-baideseo2.png"></p><p><img src="/../pic/2024-3-20-baideseo3.png"></p><p><img src="/../pic/2024-3-20-baideseo4.png"></p><p><img src="/../pic/2024-3-20-baideseo6.png" alt="image-20240320130642138"></p><p><img src="/../pic/2024-3-20-baideseo5.png" alt="image-20240320130553742"></p><p>目前发现验证完成后，sitemap提交配额为0，暂告一段落，后期有时间搞下api主动提交。</p><p><code>今日提交上限：0条  今日提交余额：0条</code></p><h1 id="三-、-hexo-submit-urls-to-search-engine-插件"><a href="#三-、-hexo-submit-urls-to-search-engine-插件" class="headerlink" title="三 、 hexo-submit-urls-to-search-engine 插件"></a>三 、 hexo-submit-urls-to-search-engine 插件</h1><p>主动推送</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;接上篇&lt;a href=&quot;https://bg4vrg.com/post/20240224112601.html&quot;&gt;《seo优化之google收录》&lt;/a&gt;，本篇记录下百度seo记录。不主动提交，它就是不收入我的博客。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="折腾" scheme="https://bg4vrg.com/tags/%E6%8A%98%E8%85%BE/"/>
    
    <category term="hexo" scheme="https://bg4vrg.com/tags/hexo/"/>
    
    <category term="seo" scheme="https://bg4vrg.com/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>无氧力量训练步骤分解2019版</title>
    <link href="https://bg4vrg.com/post/20240319195438.html"/>
    <id>https://bg4vrg.com/post/20240319195438.html</id>
    <published>2024-03-19T11:54:38.000Z</published>
    <updated>2024-03-19T13:22:41.359Z</updated>
    
    <content type="html"><![CDATA[<p>这些动作大概是2019年葛总教我的，当时还有京东边上的健身房可以免费训练。可惜随后不久就进入口罩时期，荒废到现在。</p><p>记录下备查，我的目标是小区单双杠能玩哈哈。</p><span id="more"></span><h1 id="第一天（胸部）"><a href="#第一天（胸部）" class="headerlink" title="第一天（胸部）"></a>第一天（胸部）</h1><h2 id="1-1-哑铃卧推"><a href="#1-1-哑铃卧推" class="headerlink" title="1.1 哑铃卧推"></a>1.1 哑铃卧推</h2><p><img src="/pic/liliangxunlian1.jpg"><img src="/pic/liliangxunlian2.jpg"> </p><p><img src="/pic/liliangxunlian3.jpg"><img src="/pic/liliangxunlian4.jpg"> </p><p>​    </p><h2 id="1-2-哑铃飞鸟"><a href="#1-2-哑铃飞鸟" class="headerlink" title="1.2 哑铃飞鸟"></a>1.2 哑铃飞鸟</h2><p><img src="/pic/liliangxunlian5.jpg"> </p><h2 id="替代："><a href="#替代：" class="headerlink" title="替代："></a>替代：</h2><p><img src="/pic/liliangxunlian6.jpg"><img src="/pic/liliangxunlian7.jpg"> </p><h2 id="1-3-蝴蝶、龙门夹胸"><a href="#1-3-蝴蝶、龙门夹胸" class="headerlink" title="1.3 蝴蝶、龙门夹胸"></a>1.3 蝴蝶、龙门夹胸</h2><p> <img src="/pic/liliangxunlian8.jpg"></p><h3 id="1-3-1-调整座位高度"><a href="#1-3-1-调整座位高度" class="headerlink" title="1.3.1 调整座位高度"></a>1.3.1 调整座位高度</h3><p>使把手与你的肩在同一高度，双臂保持微弯状态，注意双臂不要打开过度（打开到背平面就可以了），以免伤到肩关节，重量不要太重，内收时停顿3秒，充分挤压胸大肌。</p><h3 id="1-3-2-呼吸"><a href="#1-3-2-呼吸" class="headerlink" title="1.3.2 呼吸"></a>1.3.2 呼吸</h3><p>每做1次自然呼吸1次。</p><h3 id="1-3-3-注意事项："><a href="#1-3-3-注意事项：" class="headerlink" title="1.3.3 注意事项："></a>1.3.3 <strong>注意事项：</strong></h3><ul><li><p>一定要挺直身体，不借助外力，内夹时要用胸大肌发力，放松还原时要和缓。</p></li><li><p>动作过程中肘关节保持向后和外侧，而不是向下。</p></li><li><p>坐凳高度要合适，否则手把位置过高，锻炼肩三角肌会多一些；</p></li></ul><h1 id="第二天（背和二头）"><a href="#第二天（背和二头）" class="headerlink" title="第二天（背和二头）"></a>第二天（背和二头）</h1><h2 id="2-1-宽拉引体向上"><a href="#2-1-宽拉引体向上" class="headerlink" title="2.1 宽拉引体向上"></a>2.1 宽拉引体向上</h2><p>每组之间休息30-60秒，别超时了</p><p>从70公斤辅助开始做引体向上，先别忙上去就练，先调旁边的配重块，尝试可以做12次，记住这个重量. </p><p>然后第二组减少一块，坚持8次，第三组再减少一块，坚持6次，第四组维持第三组重量，做到做不动. </p><p>三个大循环以后，从第二组的重量来起步12次，小循环依次减少. 做完接着坐姿下拉. </p><p><img src="/pic/liliangxunlian9.jpg"> </p><h2 id="2-2-机械坐姿下拉"><a href="#2-2-机械坐姿下拉" class="headerlink" title="2.2 机械坐姿下拉"></a>2.2 机械坐姿下拉</h2><p>从10公斤开始.</p><p>8-12次一组，四组，不减重量，每次力竭，第四组你可能只能做三个，不要紧</p><h2 id="2-3-哑铃划船"><a href="#2-3-哑铃划船" class="headerlink" title="2.3 哑铃划船"></a>2.3 哑铃划船</h2><p>可以换成<strong>杠铃弯举</strong>、<strong>哑铃弯举</strong></p><h1 id="第三天（肩）"><a href="#第三天（肩）" class="headerlink" title="第三天（肩）"></a>第三天（肩）</h1><ul><li><p>哑铃坐姿推肩</p></li><li><p>哑铃侧平举</p></li><li><p>坐姿反飞鸟</p></li></ul><h1 id="第四天（手臂）"><a href="#第四天（手臂）" class="headerlink" title="第四天（手臂）"></a>第四天（手臂）</h1><ul><li><p>哑铃弯举</p></li><li><p>杠铃弯举</p></li><li><p>龙门架绳索下拉</p></li></ul><p><img src="/pic/liliangxunlian10.jpg"> </p><ul><li>单臂划船</li></ul><p><img src="/pic/liliangxunlian11.jpg"> </p><p><img src="/pic/liliangxunlian12.jpg"> </p><p><img src="/pic/liliangxunlian13.jpg"> </p><p><img src="/pic/liliangxunlian14.jpg"> </p><p><img src="/pic/liliangxunlian15.jpg"> </p><p><img src="/pic/liliangxunlian16.jpg"><br><img src="/pic/liliangxunlian17.jpg"> </p><p><img src="/pic/liliangxunlian18.jpg"><br><img src="/pic/liliangxunlian19.jpg"><br><img src="/pic/liliangxunlian20.jpg"> </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这些动作大概是2019年葛总教我的，当时还有京东边上的健身房可以免费训练。可惜随后不久就进入口罩时期，荒废到现在。&lt;/p&gt;
&lt;p&gt;记录下备查，我的目标是小区单双杠能玩哈哈。&lt;/p&gt;</summary>
    
    
    
    <category term="记录" scheme="https://bg4vrg.com/categories/note/"/>
    
    
    <category term="锻炼" scheme="https://bg4vrg.com/tags/%E9%94%BB%E7%82%BC/"/>
    
  </entry>
  
</feed>
